#!/usr/bin/env bash

# @todo add tests to verify installers actually exist

function get-installer() (
	source "$DOROTHY/sources/strict.bash"

	local command_to_installer_mapping=(
		'amp' 'setup-util-amp'
		'aria2' 'setup-util-aria2'
		'bandwhich' 'setup-util-bandwhich'
		'bandwich' 'setup-util-bandwhich' # common typo
		'bash-completion' 'setup-util-bash'
		'bash' 'setup-util-bash'
		'bat' 'setup-util-bat'
		'bottom' 'setup-util-bottom'
		'brew' 'setup-mac-brew'
		'build-essential' 'setup-util-devel'
		'cargo' 'setup-rust'
		'clang' 'setup-util-devel'
		'cloudflare-warp' 'setup-util-warp'
		'cmake' 'setup-util-devel'
		'code' 'setup-util-vscode'
		'coreutils' 'setup-util-devel'
		'curl' 'setup-util-curl'
		'deno' 'setup-util-deno'
		'diff' 'setup-util-git'
		'dig' 'setup-util-dig'
		'docker' 'setup-docker'
		'dust' 'setup-util-dust'
		'emacs' 'setup-util-emacs'
		'errno' 'setup-util-moreutils'
		'exa' 'setup-util-exa'
		'fd' 'setup-util-fd'
		'fish' 'setup-util-fish'
		'flatpak' 'setup-util-flatpak'
		'gem' 'setup-ruby'
		'gh' 'setup-util-gh'
		'git-delta' 'setup-util-delta'
		'git-lfs' 'setup-util-git'
		'git' 'setup-util-git'
		'glab' 'setup-util-glab'
		'gnome-remote-desktop' 'setup-util-vnc'
		'gnome-software' 'setup-util-gnome-software'
		'gnu-sed' 'setup-util-gsed'
		'gnupg' 'setup-util-git'
		'gnupgp' 'setup-util-git'
		'go' 'setup-go'
		'gocryptfs' 'setup-util-gocryptfs'
		'gpg' 'setup-util-git'
		'grex' 'setup-util-grex'
		'gsed' 'setup-util-gsed'
		'gxps' 'setup-util-ghostscript'
		'hdparam' 'setup-util-drive-info'
		'httpie' 'setup-util-httpie'
		'hyperfine' 'setup-util-hyperfine'
		'ifdown' 'setup-util-netscript'
		'ifup' 'setup-util-netscript'
		'jq' 'setup-util-jq'
		'kr' 'setup-util-krypton'
		'krgpg' 'setup-util-krypton'
		'kypton' 'setup-util-kypton'
		'libssl-dev' 'setup-util-devel'
		'llvm' 'setup-util-devel'
		'lshw' 'setup-util-drive-info'
		'luajit' 'setup-util-neovim'
		'make' 'setup-util-devel'
		'mas' 'setup-util-mas'
		'meld' 'setup-util-git'
		'micro' 'setup-util-micro'
		'moreutils' 'setup-util-devel'
		'nano' 'setup-util-nano'
		'ne' 'setup-util-ne'
		'neovim' 'setup-util-neovim'
		'net-tools' 'setup-util-netstat'
		'netscript' 'setup-util-netscript'
		'netstat' 'setup-util-netstat'
		'node' 'setup-node'
		'npm' 'setup-node'
		'nvim' 'setup-util-neovim'
		'ohmyzsh' 'setup-util-zsh'
		'openssh' 'setup-util-git'
		'openssl' 'setup-util-devel'
		'pamac' 'setup-util-pamac'
		'pinentry' 'setup-util-git'
		'pip' 'setup-python'
		'pipx' 'setup-python'
		'pkg-config' 'setup-util-devel'
		'plex' 'setup-util-plex'
		'prettier' 'setup-util-prettier'
		'procs' 'setup-util-procs'
		'pv' 'setup-util-pv'
		'python' 'setup-util-python'
		'python2' 'setup-util-python'
		'python3' 'setup-util-python'
		'raspi-config' 'setup-linux-raspi'
		'realpath' 'setup-util-coreutils'
		'resilio-sync' 'setup-util-resilio'
		'resilio' 'setup-util-resilio'
		'ripgrep' 'setup-util-ripgrep'
		'rmesg' 'setup-util-rmesg'
		'rpi-eeprom' 'setup-linux-raspi'
		'ruby' 'setup-ruby'
		'rust' 'setup-rust'
		'rustup' 'setup-rust'
		'samba' 'setup-util-samba'
		'screen' 'setup-util-screen'
		'sdparm' 'setup-util-drive-info'
		'shellcheck' 'setup-util-shellcheck'
		'shfmt' 'setup-util-shfmt'
		'signal' 'setup-util-signal'
		'slap' 'setup-util-slap'
		'smartmontools' 'setup-util-drive-info'
		'snap' 'setup-util-snap'
		'sponge' 'setup-util-devel'
		'sshd' 'setup-util-git'
		'sshfs' 'setup-util-git'
		'starship' 'setup-util-starship'
		'tealdeer' 'setup-util-tealdeer'
		'teip' 'setup-util-teip'
		'tokei' 'setup-util-tokei'
		'tree-sitter' 'setup-util-neovim'
		'vim' 'setup-util-vim'
		'visual-studio-code' 'setup-util-vscode'
		'vnc' 'setup-util-vnc'
		'vscode' 'setup-util-vscode'
		'warp-cli' 'setup-util-warp'
		'warp' 'setup-util-warp'
		'wget' 'setup-util-wget'
		'xcode' 'setup-util-xcode'
		'zoxide' 'setup-util-zoxide'
		'zsh' 'setup-util-zsh'
	)

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output the command(s) necessary to install the <items>.

			USAGE:
			get-installer [...options] -- ...<items>

			RETURNS:
			Success if all <items> had an installer.
			Failure if any <items> did not have an installer.

			OPTIONS:
			--invoke
			    Rather than output the installer, invoke it, such that installation occurs.

			--quiet
			    Do not output anything.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item items=() option_quiet option_invoke='no'
	option_quiet="$(echo-quiet -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-invoke'* | '--invoke'*)
			option_invoke="$(
				get-flag-value invoke --missing="$option_invoke" -- "$item" | echo-affirmative
			)"
			;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet
		'--')
			items+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) items+=("$item") ;;
		esac
	done

	# check
	if test "${#items[@]}" -eq 0; then
		help "No <items> were specified."
	fi

	# =====================================
	# Dependencies

	setup-util-sd --quiet

	# =====================================
	# Action

	# fetch installer
	local found='no' missing='no' index command installer
	for item in "${items[@]}"; do
		# trim version suffix
		# ruby@3 => ruby
		item="${item%%@*}"
		# trim tap prefix
		# clementtsang/bottom/bottom => bottom
		item="${item##*/}"
		# trim flags, and fix up superflous spaces at the start and end
		# --classic code --classic => code
		item="$(sd '(^| )[-][^ ]+' '' <<<"$item" | sd '^\s+|\s+$' '')"

		# installer
		found='no'
		for ((index = 0; index < ${#command_to_installer_mapping[@]}; index += 2)); do
			command="${command_to_installer_mapping[index]}"
			installer="${command_to_installer_mapping[$((index + 1))]}"
			if test "$item" = "$command"; then
				found='yes'
				if test "$option_quiet" != 'no'; then
					echo "$installer"
				fi
				if test "$option_invoke" = 'yes'; then
					("$installer")
				fi
				break
			fi
		done
		if test "$found" = 'no'; then
			missing='yes'
		fi
	done
	if test "$missing" = 'no' -a "$found" = 'yes'; then
		return 0
	else
		return 1
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get-installer "$@"
fi
