#!/usr/bin/env bash

function is-mounted() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks mounts for the presence of a source, target, type.

			USAGE:
			is-mounted [...options]

			OPTIONS:
			--source=<source>
			--target=<mount-point>
			--type=<type>
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# prepare
	while test "${1-}" = '--'; do
		shift
	done

	# process
	local item __source='' target='' __type=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--source='*) __source="${item#*--source=}" ;;
		'--target='*) target="${item#*--target=}" ;;
		'--type='*) __type="${item#*--type=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# dependencies

	source "$DOROTHY/sources/ripgrep.bash"

	# =====================================
	# Helpers

	local check_source='' check_target='' check_type='' filter=''

	# create the check needle
	if test -n "$source"; then
		check_source="${__source} on "
	fi
	if test -n "$target"; then
		check_target=" on ${target} "
	fi
	if test -n "$__type"; then
		if is-mac; then
			check_type+=" ($__type"
		else
			check_type+=" type $__type "
		fi
	fi

	# check if invalid
	if test -z "$check_source" -a -z "$check_target" -a -z "$check_type"; then
		echo-error "Invalid arguments to; mount-helper --check"
		return 22 # Invalid argument
	fi

	# start filtering
	filter="$(mount)"
	if test -n "$check_source"; then
		filter="$(echo "$filter" | rg --fixed-strings --regexp="$check_source" || :)"
		if test -z "$filter"; then
			echo-style --error='missing mount source:' ' ' --code="$__source"
			return 1
		fi
		echo-style --success='found mount source:' ' ' --code="$__source"
	fi
	if test -n "$check_target"; then
		filter="$(echo "$filter" | rg --fixed-strings --regexp="$check_target" || :)"
		if test -z "$filter"; then
			echo-style --error='missing mount target:' ' ' --code="$target"
			return 1
		fi
		echo-style --success='found mount target:' ' ' --code="$target"
	fi
	if test -n "$check_type"; then
		filter="$(echo "$filter" | rg --fixed-strings --regexp="$check_type" || :)"
		if test -z "$filter"; then
			echo-style --error='missing mount type:' ' ' --code="$__type"
			return 1
		fi
		echo-style --success='found mount type:' ' ' --code="$__type"
	fi

	# valid
	return 0
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	is-mounted "$@"
fi
