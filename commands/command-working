#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

function command-working() (
	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Returns success exit code if the command is available and working.
			Working check is done via [<command> --help] and [<command> --version] checks.

			USAGE:
			command-working <command>
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item command=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$command"; then
				command="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if test -z "$command"; then
		help 'No <command> was provided.'
	fi

	# =====================================
	# Helpers

	# https://github.com/greymd/teip/issues/29
	local exceptions=(
		teip
	)
	function check_status {
		local ec=0
		("$@") || ec="$?"
		# check for correct failure codes
		if test "$ec" -eq 22; then
			return 0
		else
			# otherwise return success or failure code
			return "$ec"
		fi
	}
	function check_working {
		# check it exists first
		command="$(type -P "$command")"

		# check if presence is enough for this command
		local exception
		for exception in "${exceptions[@]}"; do
			if [[ $command == */"$exception" ]]; then
				return 0
			fi
		done

		# it does exist, now check its return code
		check_status "$command" --version ||
			check_status "$command" version ||
			check_status "$command" --help ||
			check_status "$command" -h
	}

	# =====================================
	# Action

	# -P  force a PATH search for each NAME, even if it is an alias,
	#     builtin, or function, and returns the name of the disk file
	#     that would be executed
	if check_working &>/dev/null; then
		return 0 # working
	else
		return 1 # not working
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	command-working "$@"
fi
