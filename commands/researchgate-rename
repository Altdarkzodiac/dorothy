#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

function researchgate-rename() (
	local regex file id name year f nf np dir filename dup

	regex='researchgate.net/publication/(\w+)'
	for file in "$@"; do
		id=''
		name=''
		year=''
		f="$(mktemp)"
		pdftotext -layout -eol unix "$file" "$f"
		while read -r line; do
			# echo $line
			if test -z "$id"; then
				# find id
				id="$(echo "$line" | python-regex "$regex")"
			elif test -z "$name"; then
				# trim possibly invalid chars from name
				name="$(echo "$line" | sed -E 's/[:/?]//')"
			elif test -z "$year"; then
				year="$(echo "$line" | python-regex '[^\d](\d\d\d\d)[^\d]')"
			else
				break
			fi
		done < <(grep -A 10 -E "$regex" <"$f" | grep '.')

		# echo "id=[$id] year=[$year]"
		#id="$(python-regex "$f" "$regex")"
		#url="https://www.researchgate.net/publication/$id"

		if test -n "$id" -a -n "$name"; then
			if test -n "$year"; then
				nf="$year - $name [$id].pdf"
			else
				nf="$name [$id].pdf"
			fi
			dir="$(dirname "$file")"
			filename="$(basename "$file")"
			np="$dir/$nf"
			if test "$file" = "$np"; then
				cat <<-EOF
					$filename
					=> already named correctly
				EOF
			else
				dup=1
				while test -f "$np"; do
					if is-same summary --algorithm=sha256sum -- "$file" "$np"; then
						rm "$file"
						cat <<-EOF
							$filename
							=> duplicate, removed
						EOF
						np=''
						break
					fi
					dup=$((dup + 1))
					nf="${nf%.pdf*} [$dup].pdf"
					np="$dir/$nf"
				done
				if test -n "$np"; then
					mv "$file" "$np"
					cat <<-EOF
						$filename
						=> $nf
					EOF
				fi
			fi
		fi
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	researchgate-rename "$@"
fi
