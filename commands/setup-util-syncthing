#!/usr/bin/env bash

# https://github.com/syncthing/syncthing
# https://github.com/syncthing/syncthing/releases
# https://apt.syncthing.net/
# alternative to resilio sync

# syncthing-linux-386-v1.20.0-rc.1.tar.gz
# syncthing-linux-amd64-v1.20.0-rc.1.tar.gz
# syncthing-linux-arm-v1.20.0-rc.1.tar.gz
# syncthing-linux-arm64-v1.20.0-rc.1.tar.gz
# syncthing-linux-riscv64-v1.20.0-rc.1.tar.gz
# syncthing-macos-amd64-v1.20.0-rc.1.zip
# syncthing-macos-arm64-v1.20.0-rc.1.zip
# syncthing-macos-universal-v1.20.0-rc.1.zip
# syncthing-source-v1.20.0-rc.1.tar.gz

function setup-util-syncthing() (
	source "$DOROTHY/sources/strict.bash"

	# =====================================
	# Arguments

	# help
	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Sets up Syncthing: https://github.com/syncthing/syncthing

			USAGE:
			setup-util-syncthing [...options]

			OPTIONS:
			--paths
			    If specified, output the paths used by syncthing; useful for restoring backups.

			--service
			    If specified, output the service name.

			--user=<user>
			    User to establish the service as.

			--group=<group>
			    Groups to attach the service user to.

			...
			    All other options are forwarded to $(echo-style --code='setup-util').
		EOF
		# if test "$#" -ne 0; then
		# 	echo-error "$@"
		# fi
		return 22 # Invalid argument
	}

	# process
	local item user action='' groups=() util=()
	user="$(whoami)"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--paths') action='paths' ;;
		'--service') action='service' ;;
		'--install') action='install' ;;
		'--uninstall') action='uninstall' ;;
		'--action='*) action="${item#*--action=}" ;;
		'--user='*) user="${item#*--user=}" ;;
		'--group='*) groups+=("${item#*--group=}") ;;
		*) util+=("$item") ;;
		esac
	done

	# =====================================
	# Preparation

	# https://docs.syncthing.net/users/config.html
	# user: Set to require authentication.
	# password: Contains the bcrypt hash of the real password.
	# copyOwnershipFromParent: On Unix systems, tries to copy file/folder ownership from the parent directory (the directory itâ€™s located in). Requires running Syncthing as a privileged user, or granting it additional capabilities (e.g. CAP_CHOWN on Linux).

	local service_name="syncthing@$user" # this is virtual
	local service_path="/lib/systemd/system/syncthing@.service"
	local service_data_paths=(
		# "/home/$user/.config/syncthing"
		# "/home/$user/.local/share/syncthing"
		"$XDG_CONFIG_HOME/syncthing"
		"$XDG_DATA_HOME/syncthing"
		"$HOME/Library/Application Support/Syncthing"
		# "%LOCALAPPDATA%\Syncthing"
	)
	local service_all_paths=(
		"$service_path"
		"${service_data_paths[@]}"
	)

	# https://docs.syncthing.net/users/autostart.html#linux
	# https://docs.syncthing.net/users/autostart.html#using-the-desktop-environment-kde-gnome-xfce-cinnamon
	local service_desktop='/usr/share/applications/syncthing-start.desktop'
	local service_desktop_autostarter="$XDG_CONFIG_HOME/autostart/syncthing-start.desktop"

	# =====================================
	# Simple Actions

	if test "$action" = 'paths'; then
		echo-lines "${service_all_paths[@]}"
		return 0
	elif test "$action" = 'service'; then
		echo "$service_name"
		return 0
	fi

	# =====================================
	# Setup Utility

	# determine github args if github is an option on this platform
	local arch github_asset_filter='' github=()
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			github_asset_filter='-macos-arm64-'
		elif test "$arch" = 'x64'; then
			github_asset_filter='-macos-amd64-'
		fi
	elif test "$arch" = 'a64'; then
		github_asset_filter='-linux-arm64-'
	elif test "$arch" = 'a32'; then
		github_asset_filter='-linux-arm-'
	elif test "$arch" = 'x64'; then
		github_asset_filter='-linux-amd64-'
	elif test "$arch" = 'x32'; then
		github_asset_filter='-linux-386-'
	elif test "$arch" = 'r64'; then
		github_asset_filter='-linux-riscv64-'
	fi
	if test -n "$github_asset_filter"; then
		github+=(
			GITHUB_SLUG='syncthing/syncthing'
			GITHUB_RELEASE='latest'
			GITHUB_ASSET_FILTER="$github_asset_filter"
			GITHUB_UNZIP_FILTER='**/syncthing'
			GITHUB_FILENAME='syncthing'
		)
	fi

	# install, preferring github
	# despite docs, no apk
	setup-util "${util[@]}" --cli='syncthing' --app='Syncthing' --order='cask apt ... github' \
		"${github[@]}" \
		APT_KEY='https://syncthing.net/release-key.gpg' \
		APT_REPO='deb [arch={ARCH} signed-by={KEY}] https://apt.syncthing.net/ syncthing stable' \
		APT='syncthing' \
		AUR='syncthing' \
		BREW='syncthing' \
		BSD='syncthing' \
		CARGO='syncthing' \
		CASK='homebrew/cask/syncthing' \
		CHOCO='syncthing' \
		NIX='syncthing' \
		PORT='syncthing' \
		RPM='syncthing' \
		SCOOP='syncthing' \
		XBPS='syncthing' \
		ZYPPER='syncthing'

	# =====================================
	# Setup Service

	# stop at uninstall?
	if test "$action" = 'uninstall'; then
		fs-rm --sudo -- "${service_all_paths[@]}"
		return "$?"
	fi

	# disable autostart on headless
	if service-helper --supported && test -f "$service_path"; then
		service-helper --disable --stop -- "$service_name"
	fi

	# correct the permissions
	fs-own --optional --user="$user" -- "${service_data_paths[@]}"

	# enable autostart on desktop
	if is-headful && test -f "$service_desktop"; then
		if confirm --positive --ppid=$$ -- 'Autostart syncthing?'; then
			symlink-helper \
				--existing="$service_desktop" \
				--symlink="$service_desktop_autostarter"
		else
			sudo-helper -- rm -rf "$service_desktop_autostarter"
		fi
	fi

	# @todo handle --group and permissions
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup-util-syncthing "$@"
fi
