#!/usr/bin/env bash

function fs-unmount() (
	source "$DOROTHY/sources/strict.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Unmounts a mount point.

			USAGE:
			fs-unmount [--] ...<mount-point>
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item paths=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			paths+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) paths+=("$item") ;;
		esac
	done

	# check
	if test "${#paths[@]}" -eq 0; then
		help "No <mount-point>s were provided."
	fi

	# =====================================
	# Action

	function fs_unmount_single {
		# prepare
		local mount_point was_mounted success title ec
		mount_point="$(fs-realpath -- "$1")"
		was_mounted='maybe'

		# wrap in logs
		title="fs-unmount ${mount_point@Q}"
		success='no'
		echo-segment --h2="$title"
		function fs_unmount_single_return {
			if test "$success" = 'yes'; then
				echo-segment --g2="$title"
			else
				echo-segment --e2="$title"
			fi
		}
		trap fs_unmount_single_return RETURN

		# is the path missing
		if test ! -e "$mount_point"; then
			echo-style --code="$mount_point" ' ' --success="was previously unmounted"
			success='yes'
			return 0
		fi
		# path exists

		# is mounted? then unmount
		while true; do
			if is-mounted --target="$mount_point"; then
				was_mounted='yes'
				sudo-helper -- umount --verbose --recursive "$mount_point" || {
					# https://github.com/rfjakob/gocryptfs/issues/459
					what-is-using "$mount_point"
					ec=0 && confirm --positive --ppid=$$ -- "Yes for try again, no for force, ctrl+c for abort" || ec="$?"
					if test "$ec" -eq 1; then
						sudo-helper -- umount --verbose --recursive --force "$mount_point"
					fi
				}
			else
				was_mounted='no'
				echo-style --code="$mount_point" ' ' --notice="was not an active mount"
				break
			fi
		done

		# check if still mounted
		if is-mounted --target="$mount_point"; then
			echo-style --code="$mount_point" ' ' --error="failed to unmount"
			return 66 # Directory not empty
		fi
		if test "$was_mounted" = 'yes'; then
			echo-style --code="$mount_point" ' ' --success="was unmounted successfully"
		fi

		# clean up
		if test -e "$mount_point"; then
			fs-rm --sudo -- "$mount_point"
		fi
		if test -e "$mount_point"; then
			echo-style --code="$mount_point" ' ' --success="was unmounted successfully" ', ' --error="but failed to clean up"
			return 66 # Directory not empty
		fi
		echo-style --code="$mount_point" ' ' --success="was cleaned successfully"

		# success
		echo-style --code="$mount_point" ' ' --success="was unmounted and cleaned successfully"
	}

	# action
	local mount_point
	for mount_point in "${paths[@]}"; do
		fs_unmount_single "$mount_point"
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	fs-unmount "$@"
fi
