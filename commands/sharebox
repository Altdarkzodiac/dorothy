#!/usr/bin/env bash

function sharebox() (
	source "$DOROTHY/sources/strict.bash"
	source "$DOROTHY/sources/arrays.bash"
	requires_array_support 'mapfile' 'empty'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			sharebox [...options] <action> -- [...args]

			OPTIONS:
			--configure
			    Configuration guide.

			ACTIONS:
			chown -- <path>
			    Have the sharebox user take ownership of the specified path.

			info
			    Dumps various information about the sharebox.

			mount
			    Mounts the sharebox drive and vault.

			owner
				Sets up the owner account if it was not already.

			pause
			    Pause the sharebox services.

			resume
			    Resume the sharebox services.

			reboot
			    Stop the sharebox and reboots the machine safely.

			run -- <command...>
			    Runs a command as the sharebox user.

			setup
			    Setup the sharebox dependencies, user, and services.

			shutdown
			    Stop the sharebox and powers off the machine safely.

			size
			    Gets the size of the sharebox drive.

			start
			    Mounts the sharebox and starts its services.

			stop
			    Stops the sharebox serviecs and unmounts its vault and drive.

			unmount
			    Unmounts the sharebox drive and vault.

			upgrade
			    Upgrade the services of the sharebox.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item action='' configure='no' args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-configure'* | '--configure'*)
			configure="$(get-flag-value configure --missing="$configure" -- "$item" | echo-affirmative)"
			;;
		'--')
			args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$action"; then
				action="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# ensure valid action
	local actions=(
		chown
		info
		mount
		owner
		pause
		reboot
		resume
		run
		setup
		shutdown
		size
		start
		stop
		unmount
		upgrade
	)
	action="$(
		choose-option --required \
			--question='What action to perform?' \
			--filter="$action" -- "${actions[@]}"
	)"

	# =====================================
	# Checks

	# check for support
	if ! is-ubuntu; then
		echo-style --notice="[$0] is implemented for Ubuntu systems..." >/dev/stderr
		if ! confirm --negative --ppid=$$ -- 'Proceed at your own risk?'; then
			return 0
		fi
	fi

	# =====================================
	# Dependencies

	source "$DOROTHY/sources/ripgrep.bash"
	setup-util-gocryptfs --quiet

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.bash"

	# sharebox.bash may provide:
	local SHAREBOX_USER=''
	local SHAREBOX_GROUP=''
	local SHAREBOX_DRIVE_LABEL=''
	local SHAREBOX_DRIVE_COUNT=''
	local SHAREBOX_DRIVE_MOUNT=''
	local SHAREBOX_CIPHER=''
	local SHAREBOX_PLAIN=''
	if ! load_dorothy_config 'sharebox.bash'; then
		configure='yes'
	fi

	# =====================================
	# Reconfiguration

	function check_configuration {
		# required
		if test -n "$SHAREBOX_USER" -o -n "$SHAREBOX_GROUP"; then
			if ! test -n "$SHAREBOX_USER" -a -n "$SHAREBOX_GROUP"; then
				configure='yes'
			fi
		fi
		if test -n "$SHAREBOX_DRIVE_LABEL" -o -n "$SHAREBOX_DRIVE_COUNT" -o -n "$SHAREBOX_DRIVE_MOUNT"; then
			if ! test -n "$SHAREBOX_DRIVE_LABEL" -a -n "$SHAREBOX_DRIVE_COUNT" -a -n "$SHAREBOX_DRIVE_MOUNT"; then
				configure='yes'
			fi
		fi
		if test -n "$SHAREBOX_CIPHER" -o -n "$SHAREBOX_PLAIN"; then
			if ! test -n "$SHAREBOX_CIPHER" -a -n "$SHAREBOX_PLAIN"; then
				configure='yes'
			fi
		fi
	}

	# reconfigure
	while check_configuration && test "$configure" = 'yes'; do
		SHAREBOX_USER="$(
			ask --confirm \
				--question='Enter the username to use for the share.' \
				--default="$SHAREBOX_USER"
		)"
		SHAREBOX_GROUP="$(
			ask --confirm \
				--question='Enter the groupname to use for the share.' \
				--default="$SHAREBOX_GROUP"
		)"
		SHAREBOX_DRIVE_LABEL="$(
			ask --confirm \
				--question='Enter the drive label to use for the share.' \
				--default="$SHAREBOX_DRIVE_LABEL"
		)"
		SHAREBOX_DRIVE_COUNT="$(
			ask --confirm \
				--question='Enter how many drives are part of the share.' \
				--default="$SHAREBOX_DRIVE_COUNT"
		)"
		SHAREBOX_DRIVE_MOUNT="$(
			ask --confirm \
				--question='Enter the path of the drive mount point.' \
				--default="$SHAREBOX_DRIVE_MOUNT"
		)"
		SHAREBOX_CIPHER="$(
			ask --confirm \
				--question='Enter the path of the cipher directory.' \
				--default="$SHAREBOX_CIPHER"
		)"
		SHAREBOX_PLAIN="$(
			ask --confirm \
				--question='Enter the path of the decrypted cipher mount point.' \
				--default="$SHAREBOX_PLAIN"
		)"

		# save
		update_dorothy_user_config --prefer=local 'sharebox.bash' -- \
			--field='SHAREBOX_USER' --value="$SHAREBOX_USER" \
			--field='SHAREBOX_GROUP' --value="$SHAREBOX_GROUP" \
			--field='SHAREBOX_DRIVE_LABEL' --value="$SHAREBOX_DRIVE_LABEL" \
			--field='SHAREBOX_DRIVE_COUNT' --value="$SHAREBOX_DRIVE_COUNT" \
			--field='SHAREBOX_DRIVE_MOUNT' --value="$SHAREBOX_DRIVE_MOUNT" \
			--field='SHAREBOX_CIPHER' --value="$SHAREBOX_CIPHER" \
			--field='SHAREBOX_PLAIN' --value="$SHAREBOX_PLAIN"

		# apply
		configure='no'
	done

	# =====================================
	# Verify

	# vault configuration
	function check_owner_configured {
		test -n "$SHAREBOX_USER" -a -n "$SHAREBOX_GROUP"
	}
	function require_owner_configured {
		if ! check_owner_configured; then
			echo-error "User/Group not configured, run:"
			echo-style --code="$0 --configure"
			return 1
		fi
	}
	function check_owner_setup {
		check_owner_configured && is-user "$SHAREBOX_USER" && is-group "$SHAREBOX_GROUP"
	}
	function require_owner_setup {
		if ! check_owner_setup; then
			echo-error "User/Group not setup, run:"
			echo-style --code="$0 owner"
			return 1
		fi
	}
	function get_owner {
		echo "$(uid "$SHAREBOX_USER"):$(gid "$SHAREBOX_GROUP")"
	}

	# optional drive configuration
	function check_drive_configured {
		test -n "$SHAREBOX_DRIVE_LABEL" -a -n "$SHAREBOX_DRIVE_COUNT" -a -n "$SHAREBOX_DRIVE_MOUNT"
	}
	function require_drive_configured {
		if ! check_drive_configured; then
			echo-error "Drive not configured, run:"
			echo-style --code="$0 --configure"
			return 1
		fi
	}
	function check_drive_mounted {
		test -d "$SHAREBOX_DRIVE_MOUNT" && is-mounted --source="$(get_drive)" --target="$SHAREBOX_DRIVE_MOUNT"
	}
	function require_drive_mounted {
		if ! check_drive_mounted; then
			echo-error "Drive not mounted, run:"
			echo-style --code="$0 mount"
			return 1
		fi
	}
	function get_drive {
		# verify drive
		# /dev/* locations can change, or be missing, so check for that
		btrfs-helper verify -- "$SHAREBOX_DRIVE_LABEL" "$SHAREBOX_DRIVE_COUNT"

		# get/output the drive for the label
		btrfs-helper drive -- "$SHAREBOX_DRIVE_LABEL"
	}

	# vault check
	function check_vault_configured {
		test -n "$SHAREBOX_CIPHER" -a -n "$SHAREBOX_PLAIN"
	}
	function require_vault_configured {
		if ! check_vault_configured; then
			echo-error "Vault not configured, run:"
			echo-style --code="$0 --configure"
			return 1
		fi
	}
	function check_vault_mounted {
		test -d "$SHAREBOX_PLAIN" && is-mounted --source="$SHAREBOX_CIPHER" --target="$SHAREBOX_PLAIN"
	}
	function require_vault_mounted {
		if ! check_vault_mounted; then
			echo-error "Vault not mounted, run:"
			echo-style --code="$0 mount"
			return 1
		fi
	}

	# service configurations
	local config_paths service_ids service_users service_groups
	mapfile -t config_paths < <(
		setup-dns --get-config-paths
		setup-util-gocryptfs --get-config-paths
		setup-util-samba --get-config-paths
		setup-docker --get-config-paths
		setup-util-resilio --get-config-paths
		setup-util-syncthing --get-config-paths
		setup-util-plex --get-config-paths
	)
	mapfile -t service_ids < <(
		setup-util-samba --get-service-ids
		setup-docker --get-service-ids
		setup-util-resilio --get-service-ids
		setup-util-syncthing --get-service-ids
		setup-util-plex --get-service-ids
	)
	mapfile -t service_users < <(
		# setup-util-samba --get-service-user
		setup-docker --get-service-user
		setup-util-resilio --get-service-user
		setup-util-syncthing --get-service-user
		setup-util-plex --get-service-user
	)
	mapfile -t service_groups < <(
		# setup-util-samba --get-service-user
		setup-docker --get-service-group
		setup-util-resilio --get-service-group
		# setup-util-syncthing --get-service-group
		setup-util-plex --get-service-group
	)

	# =====================================
	# Action Helpers

	function do_disable {
		echo-segment --h2='Disable Service Autostart'
		service-helper --ignore-missing --disable \
			-- "${service_ids[@]}"
		echo-segment --g2='Disable Service Autostart'
	}
	function do_status {
		echo-segment --h2='Fetch Service Status'
		# seedbox status || :
		service-helper --ignore-missing --status \
			-- "${service_ids[@]}" || :
		echo-segment --g2='Fetch Service Status'
	}
	function do_pause {
		echo-segment --h2='Stop Services'
		set -x # <debug>
		# timeout 120s seedbox stop
		service-helper --ignore-missing --stop \
			-- "${service_ids[@]}"
		set +x # </debug>
		echo-segment --g2='Stop Services'
	}
	function do_resume {
		echo-segment --h2='Start Services'
		set -x # <debug>
		# seedbox stop
		service-helper --ignore-missing --restart \
			-- "${service_ids[@]}"
		# seedbox start || seedbox upgrade
		set +x # </debug>
		echo-segment --g2='Start Services'
	}
	function do_reboot {
		sudo-helper -- shutdown --reboot
	}
	function do_shutdown {
		sudo-helper -- shutdown --poweroff
	}
	function do_mount_drive {
		# check configured
		require_owner_configured
		require_drive_configured

		# fetch setup
		local owner device
		owner="$(get_owner)"
		device="$(get_drive)"

		# act
		eval-helper --no-quiet --wrap --shapeshifter \
			-- fs-mount \
			--source="$device" \
			--target="$SHAREBOX_DRIVE_MOUNT" \
			--owner="$owner" --user="$SHAREBOX_USER" --group="$SHAREBOX_GROUP"
	}
	function do_mount_vault {
		# check configured
		require_owner_configured
		require_vault_configured

		# check setup
		local owner
		owner="$(get_owner)"

		# apply
		eval-helper --no-quiet --wrap --shapeshifter \
			-- fs-mount \
			--source="$SHAREBOX_CIPHER" \
			--target="$SHAREBOX_PLAIN" \
			--owner="$owner" --user="$SHAREBOX_USER" --group="$SHAREBOX_GROUP"
	}
	function do_unmount_vault {
		require_vault_configured
		# require_vault_mounted || :

		eval-helper --no-quiet --wrap --shapeshifter \
			-- fs-unmount -- "$SHAREBOX_PLAIN"
	}
	function do_unmount_drive {
		require_drive_configured
		# require_drive_mounted || :

		eval-helper --no-quiet --wrap --shapeshifter \
			-- fs-unmount -- "$SHAREBOX_DRIVE_MOUNT"
	}

	# =====================================
	# Actions

	# @todo reorder these

	function act_resume {
		do_disable
		do_resume
		do_status
	}
	function act_start {
		act_mount
		act_resume
	}
	function act_pause {
		do_disable
		do_pause
		do_status
	}
	function act_stop {
		act_pause
		act_unmount
	}
	function act_shutdown {
		act_stop
		do_shutdown
	}
	function act_reboot {
		act_stop
		do_reboot
	}
	function act_size {
		require_drive_mounted

		get-size -- "$SHAREBOX_DRIVE_MOUNT"
	}
	function act_info {
		cat <<-EOF
			sharebox.bash configuration:
			SHAREBOX_USER         = $SHAREBOX_USER
			SHAREBOX_GROUP        = $SHAREBOX_GROUP
			SHAREBOX_DRIVE_LABEL  = $SHAREBOX_DRIVE_LABEL
			SHAREBOX_DRIVE_COUNT  = $SHAREBOX_DRIVE_COUNT
			SHAREBOX_DRIVE_MOUNT  = $SHAREBOX_DRIVE_MOUNT
			SHAREBOX_CIPHER       = $SHAREBOX_CIPHER
			SHAREBOX_PLAIN        = $SHAREBOX_PLAIN

			computed configuration:
			drive                 = $(check_drive && get_drive || :)
			owner                 = $(check_owner && get_owner || :)

			paths =
			$(echo-lines "${config_paths[@]}")

			services =
			$(echo-lines "${service_ids[@]}")

			users =
			$(echo-lines "${service_users[@]}")

			groups =
			$(echo-lines "${service_groups[@]}")

			gocryptfs:
		EOF
		# this takes a while
		gocryptfs-helper info -- "$SHAREBOX_CIPHER"
	}
	function do_owner {
		require_owner_configured

		# create user if necessary
		if ! is-user "$SHAREBOX_USER" || confirm --negative --ppid=$$ -- "The share user exists, redo it?"; then
			# create user
			sudo-helper -- useradd "$SHAREBOX_USER" || :

			# make it so the user is only a share user, rather than a login user
			sudo-helper -- usermod -L "$SHAREBOX_USER"

			# set a password for the user
			sudo-helper -- passwd "$SHAREBOX_USER"
			if command-exists smbpasswd; then
				sudo-helper -- smbpasswd -a "$SHAREBOX_USER"
			fi
		fi

		# create group if necessary
		if ! is-group "$SHAREBOX_GROUP" || confirm --negative --ppid=$$ -- "The share group exists, redo it?"; then
			# create group
			sudo-helper -- groupadd "$SHAREBOX_GROUP"
		fi

		# add users to groups
		local user group reload='no'
		local users=(
			"$USER"
			'root'
			"$SHAREBOX_USER"
			"${service_users[@]}"
		)
		local groups=(
			"$SHAREBOX_GROUP"
			"${service_groups[@]}"
		)
		for user in "${users[@]}"; do
			for group in "${groups[@]}"; do
				if is-user "$user" && ! is-user-in-group --user="$user" --group="$group"; then
					if test "$user" = "$USER"; then
						reload='yes'
					fi
					sudo-helper -- gpasswd -a "$user" "$group"
				fi
			done
		done

		# check if reload is necessary
		if test "$reload" = 'yes'; then
			cat <<-EOF
				$(echo-style --success="The current user [$USER] has been added to new groups.")
				$(echos-tyle --notice="You must logout or reboot for the change to apply.")
				Reboot your computer safely with the following command:
				$(echo-style --code="sharebox reboot")
			EOF
		fi
	}
	function act_setup {
		require_owner_configured

		# initiate owners
		do_owner

		# service
		setup-docker
		setup-util-gocryptfs
		setup-util-samba
		setup-util-plex
		setup-util-syncthing
		# no more resilio sync, as it was replaced by syncthing

		# update owners
		do_owner
	}
	function act_owner {
		do_owner
	}
	function act_chown {
		require_owner_configured
		require_owner_setup

		eval-helper --no-quiet --wrap --shapeshifter \
			-- fs-own --no-quiet --changes \
			--owner="$(get_owner)" \
			--user="$SHAREBOX_USER" \
			--group="$SHAREBOX_GROUP" \
			-- "$@"
	}
	function act_run {
		require_owner_configured
		require_owner_setup

		eval-helper --no-quiet \
			-- sudo-helper --inherit \
			--user="$SHAREBOX_USER" \
			--group="$SHAREBOX_GROUP" \
			-- "$@"
	}
	function act_unmount {
		if check_vault_configured && check_vault_mounted; then
			do_unmount_vault
		fi
		if check_drive_configured && check_drive_mounted; then
			do_unmount_drive
		fi
	}
	function act_mount {
		act_unmount

		if check_drive_configured; then
			do_mount_drive
		fi
		if check_vault_configured; then
			do_mount_vault
		fi
	}
	function act_copy {
		require_owner_configured
		require_owner_setup

		cpr --tool=rsync --sudo --owner="$(get_owner)" -- "$@"
	}

	# =====================================
	# Act

	if test "$(type -t "act_$action")" = 'function'; then
		"act_$action" "${args[@]}"
	else
		echo "Action [$action] not yet implemented." >/dev/stderr
		return 78 # Function not implemented
	fi
	return "$?"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	sharebox "$@"
fi
