#!/usr/bin/env bash

# https://docs.docker.com/engine/install/fedora/
# https://docs.docker.com/engine/install/ubuntu/
# https://docs.docker.com/engine/install/linux-postinstall/
# don't go rootless, is too complicated

# for some reason https://docs.docker.com/engine/install/linux-postinstall/ recommends
#	sudo-helper -- groupadd docker || :
#	sudo-helper -- usermod -aG docker "$USER"
# yet https://snapcraft.io/docker recommends
#	sudo-helper -- addgroup --system docker || :
#	sudo-helper -- adduser "$USER" docker || :
# we will prcoeed with the official instructions

# old ways
#	sudo-helper -- service docker restart
# new ways are what are implemented

# @todo experiemnt with using `newgrp docker` instead to workaround need for postinstall

function setup-util-docker() (
	source "$DOROTHY/sources/strict.bash"
	source "$(which eval-helper)"

	# =====================================
	# Arguments

	# help
	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Sets up Docker according to the recommended setup for your platform.

			USAGE:
			setup-util-docker

			OPTIONS:
			--paths
			    If specified, output the paths used by syncthing; useful for restoring backups.

			--service
			    If specified, output the service name.

			...
			    All other options are forwarded to $(echo-style --code='setup-util').
		EOF
		return 22 # Invalid argument
	}

	# process
	local item action='install' util=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--paths') action='paths' ;;
		'--service') action='service' ;;
		'--install') action='install' ;;
		'--uninstall') action='uninstall' ;;
		'--check') action='check' ;;
		'--action='*) action="${item#*--action=}" ;;
		*) util+=("$item") ;;
		esac
	done

	# ensure action inside util
	util+=("--action=$action")

	# =====================================
	# Preparation

	local service_name='docker'
	local service_user="$USER"
	local service_group='docker'
	local service_attach_users=("$service_user")
	# local service_attach_groups=("$service_group")
	local service_config_paths=(
		"$HOME/.docker"
	)
	local service_uninstall_paths=(
		/etc/apparmor.d/docker
		/etc/docker
		/usr/bin/docker-compose
		/var/lib/containerd
		/var/lib/docker
		/var/run/docker.sock
	)

	# =====================================
	# Simple Actions

	if test "$action" = 'paths'; then
		echo-lines "${service_config_paths[@]}"
		return 0
	elif test "$action" = 'service'; then
		echo "$service_name"
		return 0
	fi

	# =====================================
	# Setup Utility

	function delete_service_group {
		# remove the group from all users and the system, better than delgroup which is more focused only on the current user
		sudo-helper -- groupdel "$service_group"
	}
	function add_service_group {
		# add a group to the system, better than addgroup which is more focused only on the current user
		sudo-helper -- groupadd "$service_group"
	}
	function add_service_users_to_service_group {
		local user
		for user in "${service_attach_users[@]}"; do
			# attach the user to the group
			sudo-helper -- usermod -aG "$service_group" "$user"
		done
	}
	function add_permissions_to_config {
		mkdir -p "${service_config_paths[@]}"
		fs-own --user="$service_user" --group="$service_group" --permissions='g+rwx' \
			-- "${service_config_paths[@]}"
	}

	function run_official_linux_installer() (
		# run inside a subshell
		eval "$(fetch https://get.docker.com)"
	)
	function run_official_linux_checks() (
		# run inside a subshell
		eval "$(fetch https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh)"
	)
	function run_checks() {
		echo
		echo 'Testing if containers work correctly by running hello-world in a container...'
		docker run --rm hello-world

		echo
		echo 'Testing if networking works correctly by pinging gateway...'
		docker run --rm -it alpine ping -c4 "$(what-is-my-gateway)"

		echo
		echo 'Testing if networking works correctly by pinging cloudflare...'
		docker run --rm -it alpine ping -c4 cloudflare.com
	}

	# macos
	# https://docs.docker.com/desktop/install/mac-install/
	if is-mac; then
		setup-util "${util[@]}" --app='Docker' CASK='docker'
		while command-missing docker; do
			echo
			echo-style --code='docker' --dim=' command not found'
			echo-style --notice='Continue installation via the Docker app...'
			open "$(get-app 'Docker')"

			echo
			confirm --ppid=$$ -- 'Press <enter> once Docker has finished installing...'
		done
		action='check'
		# /Applications/Docker.app/Contents/MacOS/Docker --uninstall
	elif is-linux; then
		# uninstall
		if test "$action" = 'uninstall'; then
			echo
			echo 'Cleaning tooling...'
			if command-exists dnf; then
				# https://docs.docker.com/engine/install/fedora/
				sudo dnf remove docker \
					docker-client \
					docker-client-latest \
					docker-common \
					docker-latest \
					docker-latest-logrotate \
					docker-logrotate \
					docker-selinux \
					docker-engine-selinux \
					docker-engine || :
			elif command-exists apt-get snap; then
				# https://docs.docker.com/engine/install/ubuntu/
				sudo-helper -- apt-get purge -y \
					containerd \
					docker \
					docker-ce \
					docker-ce-cli \
					docker-ce-rootless-extras \
					docker-engine \
					docker.io \
					runc ||
					:
				sudo-helper -- snap remove --purge docker || :
				sudo-helper -- apt-get autoremove -y --purge || :
				sudo-helper -- dpkg --configure -a || :
				sudo-helper -- apt-get update || :
				sudo-helper -- apt-get -f install || :
			fi

			echo
			echo 'Cleaning files...'
			sudo-helper -- umount /var/lib/docker/ || :
			fs-rm --sudo -- "${service_uninstall_paths[@]}"

			if is-group "$service_group"; then
				echo
				echo 'Cleaning group...'
				delete_service_group
			fi

			echo
			echo-style --success='Uninstall complete.'

		elif test "$action" = 'install'; then
			# dependencies
			setup-util-devel
			setup-util-snap

			# install docker
			if is-group "$service_group" && command-missing docker; then
				# if just docker is missing, then proceed with install, which is what we are doing
				echo-error "$0: Docker is misconfigured."
				echo-style 'Try uninstall: ' --code='setup-util-docker --uninstall'
				echo-style 'Then install: ' --code='setup-util-docker'
				return 1

			elif ! is-group "$service_group"; then
				# no docker, no group, so install
				if command-exists dnf; then
					# https://docs.docker.com/engine/install/fedora/
					setup-util --name='Docker' \
						DNF_REPO='https://download.docker.com/linux/fedora/docker-ce.repo' \
						DNF='docker-ce' \
						DNF='docker-ce-cli' \
						DNF='containerd.io' \
						DNF='docker-compose-plugin'
				elif command-exists apt-get snap; then
					# https://docs.docker.com/engine/install/ubuntu/
					# https://askubuntu.com/a/1236711/22776
					echo
					echo 'Adding optional dependencies...'
					setup-util --name='Kernel Virtualisation Helpers' \
						APT='linux-image-extra-virtual'
				fi

				echo
				echo 'Running official installer...'
				if ! run_official_linux_installer || command-missing docker; then
					echo-error "$0: Docker installation failed."
					return 1
				fi

				echo
				echo 'Configuring group...'
				add_service_group
				add_service_users_to_service_group

				echo
				echo-style \
					--notice='Group reconfigured. Logout and run ' \
					--code='setup-util-docker' \
					--notice=' again to continue.'
				return 1

			elif ! is-user-in-group --group=docker; then
				# has group, has docker, but user not in group
				echo
				echo 'Configuring group...'
				add_service_users_to_service_group

				echo
				echo-style \
					--notice='Group was reconfigured. Logout and run ' \
					--code='setup-util-docker' \
					--notice=' again to continue.'
				return 1

			else
				# has group, has docker, and user in group
				echo
				echo 'Configuring permissions...'
				add_permissions_to_config

				echo
				echo 'Configuring service...'
				service-helper --restart --reenable --status -- containerd docker # docker.socket

				echo
				echo 'Testing if docker is configured correctly by running check-config...'
				run_official_linux_checks

				echo
				echo-style --success='Docker has been setup.'
				action='check'
			fi
		fi # end install
	fi  # end os

	if test "$action" = 'check'; then
		eval-helper --quiet --no-wrap \
			--pending="$(echo-style --bold="Testing Docker...")" \
			--success="$(echo-style --success="Docker is working.")" \
			--failure="$(echo-style --error="Failed to verify docker works.")" \
			-- run_checks
	fi

)

# fire if invoked stqandalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup-util-docker "$@"
fi
