#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

function setup-docker() (
	# warn the user
	if ! is-ubuntu; then
		echo-style --notice="[$0] is implemented for macOS and Ubuntu systems..." >/dev/stderr
		if ! confirm-negative --ppid=$$ -- 'Proceed at your own risk?'; then
			return 0
		fi
	fi

	# dependencies
	source "$DOROTHY/sources/ripgrep.bash"

	# https://docs.docker.com/engine/install/ubuntu/
	# https://docs.docker.com/engine/install/linux-postinstall/
	# don't go rootless, is too complicated

	# for some reason https://docs.docker.com/engine/install/linux-postinstall/ recommends
	#	sudo-helper -- groupadd docker || :
	#	sudo-helper -- usermod -aG docker "$USER"
	# yet https://snapcraft.io/docker recommends
	#	sudo-helper -- addgroup --system docker || :
	#	sudo-helper -- adduser "$USER" docker || :
	# we will prcoeed with the official instructions

	# old ways
	#	sudo-helper -- service docker restart
	# new ways are what are implemented

	# uninstall
	if ! is-needle '--proceed-after-group' "$@"; then
		if command-exists docker; then
			echo 'This will wipe your existing docker installation, so it can be reinstalled with the recommended setup from:'
			echo 'https://docs.docker.com/engine/install/ubuntu/'
			echo 'https://docs.docker.com/engine/install/linux-postinstall/'
			echo
			if ! confirm-positive --ppid=$$ -- 'Do you still wish to proceed?'; then
				return 0
			fi
		else
			echo 'No existing docker installation dectected.'
		fi

		echo
		echo 'Cleaning tooling...'
		sudo-helper -- apt purge -y \
			containerd \
			docker \
			docker-ce \
			docker-ce-cli \
			docker-ce-rootless-extras \
			docker-engine \
			docker.io \
			runc ||
			:
		sudo-helper -- snap remove --purge docker || :
		sudo-helper -- apt autoremove -y --purge || :
		sudo-helper -- dpkg --configure -a || :
		sudo-helper -- apt-get update || :
		sudo-helper -- apt-get -f install || :

		echo
		echo 'Cleaning files...'
		sudo-helper -- umount /var/lib/docker/ || :
		sudo-helper -- rm -rf \
			"$HOME/.docker" \
			/etc/apparmor.d/docker \
			/etc/docker \
			/usr/bin/docker-compose \
			/var/lib/containerd \
			/var/lib/docker \
			/var/run/docker.sock

		echo
		echo 'Cleaning group...'
		sudo-helper -- groupdel docker || :
		sudo-helper -- delgroup docker || :

		echo
		echo 'Adding optional dependencies...'
		# https://askubuntu.com/a/1236711/22776
		setup-util --name='Kernel Virtualisation Helpers' \
			APT='linux-image-extra-virtual'

		echo
		echo 'Running official installer...'
		sh -c "$(fetch https://get.docker.com)"

		echo
		echo 'Configuring group...'
		sudo-helper -- groupadd docker || :
		sudo-helper -- usermod -aG docker "$USER"
		echo "[docker] group membership redone for [$USER], you will need to restart your session to proceed"
		echo 'Once you have restarted your session using [exit] and logging out, proceed with [setup-docker --proceed-after-group]'
		newgrp docker
		return 0
	fi
	if groups | rg -qo docker; then
		echo "[docker] group membership enabled for [$USER]"
	else
		stderr echo "you've skipped a step, [docker] group membership was not detected for [$USER]"
		return 1
	fi

	# permissions
	echo
	echo 'Configuring permissions...'
	mkdir -p "$HOME/.docker"
	sudo-helper -- chown "$USER":"$USER" "$HOME/.docker" -R
	sudo-helper -- chmod g+rwx "$HOME/.docker" -R

	# service
	echo
	echo 'Configuring service...'
	sudo-helper -- systemctl enable docker.service
	sudo-helper -- systemctl enable containerd.service
	sudo-helper -- systemctl restart docker
	sudo-helper -- systemctl status docker --no-pager

	# tests
	echo
	echo 'Testing your docker is configured correct, by running check-config...'
	sh -c "$(fetch https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh)" || :

	echo
	echo 'Testing your containers work correctly, by running hello-world in a container...'
	docker run --rm hello-world

	echo
	echo 'Testing your networking works correctly, by pinging your gateway...'
	docker run --rm -it alpine ping -c4 "$(what-is-my-gateway)"

	echo
	echo 'Testing your networking works correctly, by pinging cloudflare...'
	docker run --rm -it alpine ping -c4 cloudflare.com

	echo
	echo 'Everything works, docker has been setup.'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup-docker "$@"
fi
