#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:

		USAGE:
		    trim-audio [<audio-stream-to-keep>] ...<input-video-file>
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) help "An unrecognised argument was provided: $item" ;;
	esac
done

# =====================================
# Act

# usage="usage: trim-audio [<audio-stream-to-keep>] ...<input-video-file>"

function convert() {
	local stream input extension filename output

	stream="$1"
	input="${2:?"$usage"}"
	extension="$(fs-extension "$input")"
	filename="$(fs-filename "$input")"

	if test "${stream}" -eq -1; then
		output="${filename} [no audio].${extension}"
	else
		output="${filename} [only audio stream ${stream}].${extension}"
	fi

	rm -f "$output"
	echo "converting $input to $output"

	if test "${stream}" -eq -1; then
		(ffmpeg -i "$input" -c copy -an "$output" && echo "trimmed audio from $input to $output") || fail "failed on $input to $output"
	else
		(ffmpeg -i "$input" -c copy -map 0:v -map 0:a:"${stream}" "$output" && echo "keep audio stream ${stream} from $input to $output") || fail "failed on $input to $output"
	fi
}

if is-integer "${1-}"; then
	for arg in "${@:2}"; do
		convert "$1" "$arg"
	done
else
	for arg in "${@:2}"; do
		convert -1 "$arg"
	done
fi
