#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"
source "$DOROTHY/sources/arrays.bash"
requires_array_support 'mapfile' 'empty'

# =====================================
# Configuration

# environment provides: GEM_HOME
# environment.bash provides: RUBY_VERSION

source "$DOROTHY/sources/config.sh"
load_dorothy_config 'setup.bash'
# ^ provides: GEM_INSTALL/RUBY_INSTALL

# =====================================
# Install

echo-color $'\n' --h1="Setup Ruby... ⏲"

# install a specific ruby version via homebrew if supported
brew_ruby='ruby'
if test -n "${RUBY_VERSION-}" -a "${RUBY_VERSION-}" != 'system' -a "${RUBY_VERSION-}" != 'default'; then
	brew_ruby="ruby@${RUBY_VERSION}"
fi

# perform the installation
env CLI=ruby \
	APK=ruby \
	APT='ruby-full' \
	BREW="$brew_ruby" \
	PACMAN=ruby \
	YUM=ruby-devel \
	setup-util

# =====================================
# Selection

# Use only a single ruby version
if test -n "${HOMEBREW_PREFIX-}"; then
	if test -z "${HOMEBREW_RUBY_VERSION-}" -o ! -d "$HOMEBREW_PREFIX/opt/ruby@${HOMEBREW_RUBY_VERSION-}"; then
		# discover
		__version_options=()
		mapfile -t rubyBinDirectories < <(expand-path "$HOMEBREW_PREFIX/opt/ruby*/bin")
		for __bin_directory in "${rubyBinDirectories[@]}"; do
			__executable="$__bin_directory/ruby"
			__directory="$(basename "$(fs-parent "$__bin_directory")")"
			__directory_version="${__directory#*@}"
			__full_version="$("$__executable" --version)"
			if test "$__directory_version" = "$__directory"; then
				__directory_version='default'
			fi
			__version_options+=(
				"$__directory_version"
				"$(
					echo-color \
						--bold="$__directory_version" \
						$'\n  ' --dim="$__full_version" \
						$'\n  ' --dim="$__executable"
				)"
			)
		done

		# solicit
		HOMEBREW_RUBY_VERSION="$(choose-option --question='There are multiple ruby versions installed, which version do you wish to prefer?' --label -- "${__version_options[@]}")"

		# apply
		config-helper \
			--file="$DOROTHY/user/config/environment.bash" \
			--find="HOMEBREW_RUBY_VERSION=.*" \
			--replace="HOMEBREW_RUBY_VERSION='$HOMEBREW_RUBY_VERSION'"
	fi

	echo-color --dim="Homebrew Ruby Version: $HOMEBREW_RUBY_VERSION"
fi

# =====================================
# Caches

# Clear caches that can conflict with paths and old installs
# Use only the intended one, which is GEM_HOME

echo-color --h2="Cleaning caches..."
if test -d "$HOME/.gem"; then
	echo-color --dim="Cleaning:       $HOME/.gem"
	rm -Rf "$HOME/.gem"
fi
if test -d "$HOME/.ruby"; then
	echo-color --dim="Cleaning:       $HOME/.ruby"
	rm -Rf "$HOME/.ruby"
fi
if test -n "${GEM_HOME-}"; then
	if test -d "$GEM_HOME"; then
		echo-color --dim="Cleaning:       $GEM_HOME"
		rm -Rf "$GEM_HOME"
	fi
	mkdir -p "$GEM_HOME"
fi

# =====================================
# Reload

echo-color --h2="Reload paths to help changes be detected..."
source "$DOROTHY/sources/environment.sh"

# check
if ! command-exists gem; then
	echo-color --e2='Unable to find [gem] executable, so cannot proceed... ❌' >/dev/stderr
	exit 1
fi
echo-color \
	--dim="Ruby Path:      $(which ruby)" $'\n' \
	--dim="Ruby Version:   $(ruby --version)" $'\n' \
	--dim="Gem Path:       $(which gem)" $'\n' \
	--dim="Gem Version:    $(gem --version)"

# =====================================
# Gems

function install_each_gem {
	local name version
	echo-color --h2="Installing $# ruby gems..."
	for arg in "$@"; do
		name="${arg% *}"
		version="${arg#* }" # will be the same as name, if no version was provided
		if test "$version" = "$name"; then
			version=''
		fi
		env NAME="gem:$name" GEM="$name" GEM_VERSION="$version" setup-util gem
	done
	echo-color --g2="Installed $# ruby gems."
}

# Update
# As we wipe gems each time, this is no longer needed
# also, it causes the following error on apt systems
# ERROR:  Your RubyGems was installed trough APT, and upgrading it through RubyGems
# 	itself is unsupported. If you really need the latest version of RubyGems (tip:
# 	you usually don't), then you need to install RubyGems (and Ruby) manually,
# 	maybe using tools like ruby-install, rvm, etc.
# echo -e '\nUpdating ruby gems...'
# gem update --system

# Install
if test -v 'GEM_INSTALL'; then
	install_each_gem "${GEM_INSTALL[@]}"
fi
if test -v 'RUBY_INSTALL'; then
	install_each_gem "${RUBY_INSTALL[@]}"
fi

# =====================================
# Done

echo-color --h1="Setup Ruby completed. ✅"
