#!/usr/bin/env bash

function setup-util-resilio() (
	source "$DOROTHY/sources/strict.bash"

	# =====================================
	# Arguments

	# help
	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Sets up Resilio Sync.

			USAGE:
			setup-util-resilio [...options]

			OPTIONS:
			--get-config-paths
			    If specified, output configuration paths, useful for restoring backups.

			--get-service-ids
			    If specified, output service identifiers, ordered by startup preference.

			--get-service-user
			    If specified, output service user.

			--get-service-group
			    If specified, output service group.

			...
			    All other options are forwarded to $(echo-style --code='setup-util').
		EOF
		return 22 # Invalid argument
	}

	# process
	local item action='install' util=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--get-config-paths') action='get-config-paths' ;;
		'--get-service-ids') action='get-service-ids' ;;
		'--get-service-user') action='get-service-user' ;;
		'--get-service-group') action='get-service-group' ;;
		'--install') action='install' ;;
		'--uninstall') action='uninstall' ;;
		'--action='*) action="${item#*--action=}" ;;
		*) util+=("$item") ;;
		esac
	done

	# ensure action inside util
	util+=("--action=$action")

	# =====================================
	# Checks

	# check for support
	if ! is-linux; then
		echo-style --notice="[$0] is implemented for Linux systems..." >/dev/stderr
		if ! confirm --negative --ppid=$$ -- 'Proceed at your own risk?'; then
			return 0
		fi
	fi

	# =====================================
	# Preparation

	local service_title='Resilio Sync'
	local service_ids=(
		'resilio-sync'
	)
	local service_path='/lib/systemd/system/resilio-sync.service'
	local service_config_path='/etc/resilio-sync/config.json'
	local service_config_paths=(
		"$service_config_path"
		"$XDG_CONFIG_HOME/resilio-sync"
	)
	local service_uninstall_paths=(
		"$service_path"
		'/etc/resilio-sync/'
		'/var/lib/resilio-sync/'
	)
	function get_user {
		config-helper --file="$service_path" -- \
			--field='User'
	}
	function get_group {
		config-helper --file="$service_path" -- \
			--field='Group'
	}

	# =====================================
	# Simple Actions

	if test "$action" = 'get-config-paths'; then
		echo-lines "${service_config_paths[@]}"
		return 0
	elif test "$action" = 'get-service-ids'; then
		echo-lines "${service_ids[@]}"
		return 0
	elif test "$action" = 'get-service-user'; then
		get_user
		return 0
	elif test "$action" = 'get-service-group'; then
		get_group
		return 0
	fi

	# =====================================
	# Setup Utility

	# https://help.resilio.com/hc/en-us/articles/206178924
	# https://help.resilio.com/hc/en-us/articles/204762449-Guide-to-Linux
	# https://help.resilio.com/hc/en-us/articles/206178924-Installing-Sync-package-on-Linux

	# install
	setup-util "${util[@]}" --name='Resilio Sync' \
		APT_KEY='https://linux-packages.resilio.com/resilio-sync/key.asc' \
		APT_REPO='deb [arch={ARCH} signed-by={KEY}] http://linux-packages.resilio.com/resilio-sync/deb resilio-sync non-free' \
		APT='resilio-sync'

	# stop at uninstall?
	if test "$action" = 'uninstall'; then
		fs-rm --sudo \
			-- "${service_uninstall_paths[@]}"
		return "$?"
	fi

	# =====================================
	# Setup Service

	# only manage the service if it is supported
	if service-helper --supported; then
		# verify the service was initialised
		if service-helper --exists -- "${service_ids[@]}"; then
			# correct the permissions
			fs-own --optional \
				--user="$(get_user)" \
				--group="$(get_group)" \
				-- "${service_config_paths[@]}" "${service_uninstall_paths[@]}"

			# disable autostart
			service-helper --disable --stop \
				-- "${service_ids[@]}"

			# configure
			if confirm --negative --ppid=$$ -- "Customise $service_title configuration?"; then
				edit --sudo -- "$service_path"
				edit --sudo -- "$service_config_path"
			fi
		else
			# headful/headless, no service
			echo-error "$0: $service_title was installed, however the service was not."
			return 1
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup-util-resilio "$@"
fi
