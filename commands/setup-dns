#!/usr/bin/env bash
export BINDIR
if is-mac; then
	BINDIR="$HOME/bin"
	mkdir -p "$BINDIR"
else
	BINDIR="/usr/local/bin"
	sudo mkdir -p "$BINDIR"
fi
source "$DOROTHY/sources/strict.bash"
source "$DOROTHY/sources/arrays.bash"
requires_array_support 'mapfile' 'empty'
source "$DOROTHY/sources/config.bash"
load_dorothy_config 'dns.bash'

# dependencies
source "$DOROTHY/sources/ripgrep.bash"
env QUIET=yes setup-util-dig

# installers
# https://github.com/AdguardTeam/AdGuardHome/releases
# https://github.com/cloudflare/cloudflared/releases
# https://github.com/DNSCrypt/dnscrypt-proxy/releases
arch="$(get-arch)"
aghome_installer=''
cloudflared_installer=''
dnscrypt_installer=''
if is-mac; then
	if test "$arch" = 'a64'; then
		aghome_installer='AdGuardHome_darwin_arm64.zip'
		dnscrypt_installer='dnscrypt-proxy-macos_arm64' # ...
	elif test "$arch" = 'x64'; then
		aghome_installer='AdGuardHome_darwin_amd64.zip'
		cloudflared_installer='cloudflared-darwin-amd64.tgz'
		dnscrypt_installer='dnscrypt-proxy-macos_x86_64' # ...
	fi
elif is-linux; then
	if test "$arch" = 'a64'; then
		aghome_installer='AdGuardHome_linux_arm64.tar.gz'
		cloudflared_installer='cloudflared-linux-arm64'
		dnscrypt_installer='dnscrypt-proxy-linux_arm64' # ...
	elif test "$arch" = 'x64'; then
		aghome_installer='AdGuardHome_linux_amd64.tar.gz'
		cloudflared_installer='cloudflared-linux-amd64'
		dnscrypt_installer='dnscrypt-proxy-linux_x86_64' # ...
	elif test "$arch" = 'x32'; then
		aghome_installer='AdGuardHome_linux_386.tar.gz'
		cloudflared_installer='cloudflared-linux-386'
		dnscrypt_installer='dnscrypt-proxy-linux_i386' # ...
	fi
fi

function die_unsupported() {
	echo-style \
		--error="This platform [$arch] does not yet support: $1" $'\n' \
		--notice='Supported DNS services for this platform are:' $'\n' \
		"${services[*]}"
	return 19 # Operation not supported by device
}

function die_unknown() {
	echo-style \
		--error="Unknown DNS service: $1" $'\n' \
		--notice='Supported DNS services for this platform are:' $'\n' \
		"${services[*]}"
	return 22 # Invalid argument
}

# -------------------------------------
# AdGuard Home

function aghome_install {
	echo
	if command-exists AdGuardHome; then
		echo 'AdGuard Home is being upgraded...'
	else
		echo 'AdGuard Home is being installed...'
	fi

	# binary
	if test -n "$aghome_installer"; then
		f="$(mktemp)"
		down-zip "https://static.adguard.com/adguardhome/release/${aghome_installer}" \
			--filter="AdGuardHome/AdGuardHome" \
			--destination="$f"
		sudo mv "$f" "$BINDIR/AdGuardHome"
		sudo chmod +x "$BINDIR/AdGuardHome"
	else
		die_unsupported 'AdGuard Home'
	fi
	echo "AdGuard Home is now installed to: $BINDIR/AdGuardHome"

	# listen udp 0.0.0.0:53: bind: address already in useFix
	# If you click "Fix", AdGuard Home will configure your system to use AdGuard Home DNS server.
	# It will perform these tasks:
	# Deactivate system DNSStubListener
	# Set DNS server address to 127.0.0.1
	# Replace symbolic link target of /etc/resolv.conf with /run/systemd/resolve/resolv.conf
	# Stop DNSStubListener (reload systemd-resolved service)
	# As a result all DNS requests from your system will be processed by AdGuard Home by default.

	# 127.0.0.1
	# 172.17.0.1
	# 192.168.5.80
	# ::1
	# fd25:2c42:37d6:1:dea6:32ff:fecb:7833

	# config
	echo 'AdGuard Home is being configured...'
	sudo "$BINDIR/AdGuardHome" -s uninstall || :
	sudo "$BINDIR/AdGuardHome" -s install
	confirm --ppid=$$ -- "Press any key once you have completed the AdGuard Home setup..."
	echo 'AdGuard Home is now configured'
}

function aghome_uninstall {
	echo
	if ! command-exists AdGuardHome; then
		echo 'AdGuard Home has already been uninstalled'
		return 0
	fi

	echo 'AdGuard Home is being uninstalled...'
	killall AdGuardHome || :
	sudo AdGuardHome -s uninstall || :
	sudo rm -fv "$BINDIR/AdGuardHome" || :
	sudo rm -fvi "$BINDIR/AdGuardHome.yaml" || :
	echo 'AdGuard Home is now uninstalled'
}

# -------------------------------------
# cloudflare warp
# doesn't yet support any of the platforms I use, so no support in here yet
# setup-util-warp

# -------------------------------------
# cloudflared
# https://developers.cloudflare.com/1.1.1.1/dns-over-https/cloudflared-proxy

# extra tunnel setup
# https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/run-tunnel/run-as-service
# https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide
# https://developers.cloudflare.com/cloudflare-one/tutorials/ssh-browser
# https://blog.cloudflare.com/browser-vnc-with-zero-trust-rules/
# https://developers.cloudflare.com/cloudflare-one/tutorials/vnc-client-in-browser
# https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
# cloudflared tunnel ingress validate
#
# https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/run-tunnel/run-as-service
# https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/config
# https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress#supported-protocols
# ```
# cloudflared tunnel login
# cloudflared tunnel run --url ssh://localhost:22 gerbil
# cloudflared tunnel run
# sudo cloudflared service install
# ```

# https://ubuntu.com/server/docs/service-openssh
# ```
# sudo apt install openssh-server
# sudo sshd -t -f /etc/ssh/sshd_config
# sudo systemctl restart sshd.service
# ```

function cloudflared_install {
	# install
	echo
	if command-exists cloudflared; then
		cat <<-EOF >/dev/stderr
			Cloudflared wasn't uninstalled earlier in the clean, so it is probably installed by something we don't know about.
			Manually uninstall it, then proceed.
		EOF
		return 1
	fi

	# binary
	echo 'Cloudflared is being installed...'
	if is-mac; then
		brew install cloudflare/cloudflare/cloudflared
	elif test -n "$cloudflared_installer"; then
		f="$(mktemp)"
		github-release-file-download cloudflare/cloudflared \
			--filter="$cloudflared_installer" \
			--destination="$f"
		sudo mv "$f" "$BINDIR/cloudflared"
		chmod +x "$BINDIR/cloudflared"
	else
		die_unsupported 'Cloudflared'
	fi
	echo "Cloudflared is now installed to: $BINDIR/cloudflared"

	# config
	echo 'Cloudflared is being configured...'
	if is-mac; then
		sudo cloudflared service install
		sudo launchctl start com.cloudflare.cloudflared
	else
		upstream="$(
			ask --confirm \
				--question="Is there a specific upstream DNS provider you wish to proxy towards?" \
				--default="${CLOUDFLARED_UPSTREAM-}"
		)"
		proxy_cmd=("$BINDIR/cloudflared" '--no-autoupdate' 'proxy-dns')
		if test -n "$upstream"; then
			proxy_cmd+=(
				'--upstream'
				"$upstream"
			)
		fi
		sudo tee '/etc/systemd/system/cloudflared-proxy-dns.service' >/dev/null <<-EOF
			[Unit]
			Description=DNS over HTTPS (DoH) proxy client
			Wants=network-online.target nss-lookup.target
			Before=nss-lookup.target

			[Service]
			AmbientCapabilities=CAP_NET_BIND_SERVICE
			CapabilityBoundingSet=CAP_NET_BIND_SERVICE
			DynamicUser=yes
			ExecStart=${proxy_cmd[*]}

			[Install]
			WantedBy=multi-user.target
		EOF
		sudo systemctl enable --now cloudflared-proxy-dns
		sudo systemctl status cloudflared-proxy-dns --no-pager
	fi
	echo 'Cloudflared is now configured'

	if is-affirmative "${CLOUDFLARED_TUNNEL-}" || confirm-negative --ppid=$$ -- 'Do you also wish to configure a Cloudflared tunnel service?'; then
		# prepare
		hd="$HOME/.cloudflared"
		sd='/usr/local/etc/cloudflared'
		mkdir -p "$hd"
		sudo mkdir -p "$sd"

		# user
		cloudflared tunnel login
		sudo cp "$hd/cert.pem" "$sd/"

		# tunnel prepare
		tunnel_name="$(
			ask --required --confirm \
				--question="What will be name identifier of the tunnel?" \
				--default="${CLOUDFLARED_TUNNEL_NAME-}"
		)"
		cloudflared tunnel cleanup "$tunnel_name" || :
		tunnel_cred="${tunnel_name}.json"
		rm -rf "${hd}/${tunnel_cred}" || :
		cloudflared tunnel delete "$tunnel_name" || :

		# tunnel create
		cloudflared tunnel create --credentials-file "$hd/$tunnel_cred" "$tunnel_name"
		sudo cp "$hd/$tunnel_cred" "$sd/"

		# route create
		tunnel_ingress="${CLOUDFLARED_TUNNEL_INGRESS-}"
		tunnel_config="${tunnel_name}.yml"
		rm -Rf "$hd/$tunnel_config" || :
		if test -z "$tunnel_ingress"; then
			tunnel_url="$(
				ask --required --confirm \
					--question='What is the URI that the tunnel exposes?' \
					--default="${CLOUDFLARED_TUNNEL_URL:-"ssh://localhost:22"}"
			)"
			tunnel_ingress="url: $tunnel_url"
		fi
		cat >"$hd/$tunnel_config" <<-EOF
			tunnel: $tunnel_name
			credentials-file: $sd/$tunnel_cred
			$tunnel_ingress
		EOF
		sudo cp "$hd/$tunnel_config" "$sd/"

		# tunnel route
		tunnel_hostnames=()
		if test -n "$tunnel_ingress"; then
			# shellcheck disable=SC2016
			mapfile -t tunnel_hostnames < <(rg -o 'hostname: (.+)' --replace '$1' "$hd/$tunnel_config" | uniq)
		fi
		if is-array-partial "${tunnel_hostnames[@]}"; then
			cat <<-EOF >/dev/stderr
				An invalid hostname is present:
				$(echo-verbose "${tunnel_hostnames[@]}")

				You will be prompted for the hostname instead...
			EOF
			tunnel_hostnames=()
		fi
		if is-array-empty "${tunnel_hostnames[@]}"; then
			tunnel_hostnames+=(
				"$(
					ask \
						--required --confirm \
						--default="${CLOUDFLARED_TUNNEL_HOSTNAME-}" \
						--question="$(
							cat <<-EOF
								What will be the hostname to access the tunnel?
								E.g. ${tunnel_name}.domain.com
							EOF
						)"
				)"
			)
		fi
		for tunnel_hostname in "${tunnel_hostnames[@]}"; do
			echo "routing [$tunnel_hostname] to [$tunnel_name]"
			cloudflared tunnel route dns --overwrite-dns "$tunnel_name" "$tunnel_hostname"
		done

		# service create
		sudo tee '/etc/systemd/system/cloudflared-tunnel.service' >/dev/null <<-EOF
			[Unit]
			Description=Argo Tunnel
			After=network.target

			[Service]
			TimeoutStartSec=0
			Type=notify
			ExecStart=/usr/local/bin/cloudflared --no-autoupdate --config "$sd/$tunnel_config" tunnel run
			Restart=on-failure
			RestartSec=5s

			[Install]
			WantedBy=multi-user.target
		EOF
		sudo systemctl enable --now cloudflared-tunnel
		sudo systemctl status cloudflared-tunnel --no-pager
		# journalctl -u cloudflared-tunnel.service --no-pager
		# ^ journalctl outputs the entire log history, which can be hundreds of thousands of lines
	fi
}

function cloudflared_uninstall {
	# uninstall
	echo
	echo 'Cloudflared is being uninstalled...'
	if is-mac; then
		sudo launchctl stop com.cloudflare.cloudflared || :
		sudo launchctl remove com.cloudflare.cloudflared || :
		sudo cloudflared service uninstall || :
		brew uninstall cloudflare/cloudflare/cloudflared || :
	else
		sudo cloudflared service uninstall || :
		sudo systemctl stop cloudflared-proxy-dns || :
		sudo systemctl disable cloudflared-proxy-dns || :
		sudo rm -fv '/etc/systemd/system/cloudflared-proxy-dns.service' || :
		# tunnel
		# todo: need to read in the tunnel name from the config file
		# ok cloudflared tunnel cleanup "$tunnel_name"
		sudo systemctl stop cloudflared-tunnel || :
		sudo systemctl disable cloudflared-tunnel || :
		sudo rm -fv '/etc/systemd/system/cloudflared-tunnel.service' || :
		sudo rm -fv "$BINDIR/cloudflared" || :
	fi
	# remove legacy configuration files
	sudo rm -rfv /etc/cloudflared/ || :
	sudo rm -rfv /usr/local/etc/cloudflared/ || :
	sudo rm /etc/systemd/system/cloudflared* || :
	echo 'Cloudflared is now uninstalled'
}

# -------------------------------------
# DNSCrypt Proxy
# https://github.com/DNSCrypt/dnscrypt-proxy/wiki/Installation-linux

function dnscrypt_install {
	# install
	echo
	if command-exists dnscrypt-proxy; then
		cat <<-EOF >/dev/stderr
			DNSCrypt Proxy wasn't uninstalled earlier in the clean, so it is probably installed by something we don't know about.
			Manually uninstall it, then proceed.
		EOF
		exit 1
	fi

	# binary
	echo 'DNSCrypt Proxy is installing...'
	if is-mac; then
		brew install dnscrypt-proxy || :
	elif test -n "$dnscrypt_installer"; then
		f="$(mktemp)"
		github-release-file-download DNSCrypt/dnscrypt-proxy \
			--filter="$dnscrypt_installer" \
			--extract='*/dnscrypt-proxy' \
			--destination="$f"
		sudo mv "$f" "$BINDIR/dnscrypt-proxy"
		sudo chmod +x "$BINDIR/dnscrypt-proxy"
	else
		die_unsupported 'DNSCrypt Proxy'
	fi
	echo "DNSCrypt Proxy is now installed to: $BINDIR/dnscrypt-proxy"

	# config
	echo 'DNSCrypt Proxy is being configured...'
	if is-missing '/usr/local/etc/dnscrypt-proxy.toml'; then
		f="$(mktemp)"
		down \
			"https://gist.githubusercontent.com/balupton/48057270a67d70e2ac984fdfa475ad29/raw/dnscrypt-proxy.toml" \
			--destination="$f"
		sudo mv "$f" '/usr/local/etc/dnscrypt-proxy.toml'
	fi
	echo 'DNSCrypt Proxy is now configured'

	# service
	echo 'DNSCrypt Proxy service is being installed...'
	if is-mac; then
		sudo brew services start dnscrypt-proxy
	else
		sudo dnscrypt-proxy -check -config '/usr/local/etc/dnscrypt-proxy.toml'
		sudo dnscrypt-proxy -service install -config '/usr/local/etc/dnscrypt-proxy.toml'
		sudo dnscrypt-proxy -service start -config '/usr/local/etc/dnscrypt-proxy.toml'
		sleep 5 # needed otherwise sometimes resolve fails
		sudo systemctl status dnscrypt-proxy.service --no-pager
		sudo dnscrypt-proxy -resolve cloudflare.com -config '/usr/local/etc/dnscrypt-proxy.toml'
	fi
	echo 'DNSCrypt Proxy service is now installed'
}

function dnscrypt_uninstall {
	# uninstall
	echo
	if ! command-exists dnscrypt-proxy; then
		echo 'DNSCrypt Proxy is already completely uninstalled'
		return 0
	fi

	# service first, as it uses the binary to uninstall the service
	echo 'DNSCrypt Proxy service is being uninstalled...'
	sudo dnscrypt-proxy -service stop -config '/usr/local/etc/dnscrypt-proxy.toml' || :
	sudo dnscrypt-proxy -service uninstall -config '/usr/local/etc/dnscrypt-proxy.toml' || :
	echo 'DNSCrypt Proxy is now completely uninstalled'

	# binary
	echo 'DNSCrypt Proxy is being uninstalled...'
	if is-mac; then
		sudo brew services stop dnscrypt-proxy
		brew uninstall dnscrypt-proxy || :
	else
		sudo rm -fv "$BINDIR/dnscrypt-proxy" # always remove || :
	fi

	# config
	sudo rm -fvi '/usr/local/etc/dnscrypt-proxy.toml' # ask if they want it removed || :
}

# -------------------------------------
# Resolv

function resolv_disable {
	# this is only for ubuntu systems
	if is-mac; then
		return
	fi

	echo
	echo 'Disabling resolv...'
	sudo systemctl stop systemd-resolved
	sudo systemctl disable systemd-resolved
	sudo rm -f /etc/resolv.conf
	sudo tee '/etc/resolv.conf' >/dev/null <<-EOF
		nameserver 127.0.0.1
		options edns0
	EOF
	sudo systemctl daemon-reload
	echo 'Disabled resolv'

	echo 'Active DNS services:'
	what-is-listening dns
}

function resolv_enable {
	# this is only for ubuntu systems
	if is-mac; then
		return
	fi

	echo
	echo 'Enabling resolv...'
	sudo rm -f /etc/resolv.conf

	# what stack overflow recommends
	# sudo ln -sf /etc/systemd/resolved.conf /etc/resolv.conf
	# sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf

	# what my fresh install of other ubuntu servers do:
	sudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

	sudo systemctl enable systemd-resolved
	sudo systemctl start systemd-resolved
	sudo systemctl daemon-reload
	echo 'Enabled resolv'

	echo 'Active DNS services:'
	what-is-listening dns
}

# -------------------------------------
# Prepare

# services
services=()
if test -n "$cloudflared_installer"; then
	services+=(cloudflared)
fi
if test -n "$dnscrypt_installer"; then
	services+=(dnscrypt)
fi
if test -n "$aghome_installer"; then
	services+=(aghome)
fi
services+=(system)

# -------------------------------------
# Perform

# validate service is actually available
service="$(
	choose-option --confirm \
		--question='Which DNS service to use?' \
		--filter="${1:-"${DNS_SERVICE-}"}" -- "${services[@]}"
)"

if test "$service" = 'system'; then
	echo 'Selected DNS service: system'
elif test "$service" = 'aghome' -o "$service" = 'adguard-home' -o "$service" = 'ag'; then
	if is-needle 'aghome' "${services[@]}"; then
		service='aghome'
		echo 'Selected DNS service: AdGuard Home'
	else
		die_unsupported 'AdGuard Home'
	fi
elif test "$service" = 'cloudflared' -o "$service" = 'cloudflare' -o "$service" = 'cf'; then
	if is-needle 'cloudflared' "${services[@]}"; then
		service='cloudflared'
		echo 'Selected DNS service: Cloudflared'
	else
		die_unsupported 'Cloudflared'
	fi
elif test "$service" = 'dnscrypt' -o "$service" = 'dnscrypt-proxy'; then
	if is-needle 'dnscrypt' "${services[@]}"; then
		service='dnscrypt'
		echo 'Selected DNS service: DNSCrypt Proxy'
	else
		die_unsupported 'DNSCrypt Proxy'
	fi
else
	die_unknown "$service"
fi

echo
echo 'Uninstalling the custom DNS services to start fresh'
aghome_uninstall
dnscrypt_uninstall
cloudflared_uninstall
resolv_enable

echo
if test "$service" = 'system'; then
	cat <<-EOF
		Custom DNS service removed, now using the system DNS service."
		If you have not yet configured a system DNS provider to use, you will soon be prompted.
	EOF
	select-dns --no-local
else
	# backup dns provider
	echo "Configuring the system DNS service to use the backup DNS provider while we configure your new custom DNS service..."
	select-dns backup --no-confirm
	sleep 5 # needed otherwise sometimes install downloads fail

	# reinstall the service we actually care about
	if test "$service" = 'aghome'; then
		aghome_install
	elif test "$service" = 'dnscrypt'; then
		dnscrypt_install
	elif test "$service" = 'cloudflared'; then
		cloudflared_install
	else
		die_unknown "$service"
	fi

	# local dns provider
	echo
	echo 'Now selecting the custom DNS service as your system DNS provider...'
	select-dns local --no-confirm # local-5553
	resolv_disable

	# Test
	echo
	echo 'Testing that the system is now using the custom DNS service...'
	if ! (dig -x cloudflare.com | rg -q ';; SERVER: 127.0.0.1'); then
		cat <<-EOF >/dev/stderr
			FAILURE
			Custom DNS configuration has failed.
			The domain failed to resolve or did not resolve with the local DNS service.
			You should run [select-dns] to have working DNS in the meantime.
			You can debug further by running [debug-network].
		EOF
		exit 1
	fi
fi

echo "DNS service setup succesfully ✅"
