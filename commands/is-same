#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"
source "$DOROTHY/sources/arrays.bash"
requires_array_support 'mapfile' 'empty'

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Compares two paths to determine if their contents are identical, compares:
		- paths
		- real paths, via [fs-realpath]
		- structure, via [fs-structure]
		- checksum, via [checksum]

		USAGE:
		is-same [...flags] -- <first path> <second path>

		FLAGS:
		--algorithm=<algorithm>
		    The algorithm to use for checksumming.
		    See [checksum --help] for details.

		RETURNS:
		Exit code [0] if the same.
		Exit code [1] if different.
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
option_algorithm=''
option_paths=()
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--algorithm='*) option_algorithm="${item:12}" ;;
	'--')
		option_paths+=("$@")
		shift "$#"
		break
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) help "An unrecognised argument was provided: $item" ;;
	esac
done

# verify
if test "${#option_paths[@]}" -ne 2; then
	help "Not enough paths were provided."
fi

# =====================================
# Action

# extract and absolute the paths
first_path="$(fs-absolute "${option_paths[0]}")"
second_path="$(fs-absolute "${option_paths[1]}")"

# same path
if test "$first_path" = "$second_path"; then
	echo-style \
		--h1="$first_path" $'\n' \
		$'\n' \
		--h1="$second_path" $'\n' \
		$'\n' \
		--g1="^ same because they are the same path"
	exit 0
fi

# same target
if test "$(fs-realpath "$first_path")" = "$(fs-realpath "$second_path")"; then
	echo-style \
		--h1="$first_path" $'\n' \
		$'\n' \
		--h1="$second_path" $'\n' \
		$'\n' \
		--g1="^ same because they are are symlinked"
	exit 0
fi

# same structure
first_structure="$(fs-structure "$first_path")"
second_structure="$(fs-structure "$second_path")"
if test "$first_structure" != "$second_structure"; then
	echo-style \
		--h1="$first_path" $'\n' \
		--dim="$first_structure" $'\n' \
		$'\n' \
		--h1="$second_path" $'\n' \
		--dim="$second_structure" $'\n' \
		$'\n' \
		--e1='^ different because their structures differ'
	exit 1
fi

# checksum
mapfile -t checksums < <(checksum --untitled --summary --algorithm="$option_algorithm" -- "$first_path" "$second_path")
echo-lines -- "${checksums[@]}"

# sanity
if test "${#checksums[@]}" -ne 2; then
	echo-style --error="invalid amount of checksums, there should only be two, a summary checksum for each directory, instead there were: ${#checksums[@]}"
	exit 1
fi

# same checksum
if test "${checksums[0]}" = "${checksums[1]}"; then
	echo-style --g1="^ same because their checksums match"
	exit 0
fi

# otherwise
echo-style --e1="^ different"
exit 1
