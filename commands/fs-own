#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Claim ownership of a path, by updating its permissions via chmod and chown.

		USAGE:
		fs-own [--verbose] [--owner=<owner>] [--user=<user>] [--group=<group>] -- <...paths>

		QUIRKS:
		The user and the group both get +rwx permissions via [chmod g+rwx,u+rwx].
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
paths=()
option_verbose='no'
option_owner=''
option_user=''
option_group=''
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'--help' | '-h') help ;;
	'--no-verbose'* | '--verbose'*) option_verbose="$(
		get-flag-value verbose --missing="$option_verbose" -- "$item" | echo-affirmative
	)" ;;
	'--owner='*) option_owner="${item:8}" ;;
	'--user='*) option_user="${item:7}" ;;
	'--group='*) option_group="${item:8}" ;;
	'--')
		paths+=("$@")
		shift $#
		break
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) help "An unrecognised argument was provided: $item" ;;
	esac
done

# check
if test "${#paths[@]}" -eq 0; then
	help "No paths were provided."
fi
for path in "${paths[@]}"; do
	if test -z "$path"; then
		help "An empty path was provided."
	fi
	if test ! -e "$path"; then
		help "A path was provided, that does not exist:" "$path"
	fi
done

# =====================================
# Helpers

if is-mac; then
	ch_args=('-R')
else
	ch_args=(
		'--recursive'
		'--changes'
	)
fi

function do_sudo {
	if test "$option_verbose" = 'yes'; then
		echo-eval sudo "$@"
	else
		sudo "$@"
	fi
}
function do_user {
	do_sudo --set-home --user="$option_user" "$@"
}
function do_user_then_root {
	if test -n "$option_user" && do_user "$@"; then
		return 0
	elif do_sudo "$@"; then
		return 0
	else
		echo "^ sudo user, and sudo, both failed, giving up."
		return 1
	fi
}
function do_chown {
	do_sudo chown "${ch_args[@]}" "$@"
}
function do_chmod {
	do_user_then_root chmod "${ch_args[@]}" "$@"
	# find "$path" -type d -exec chmod 755 {} \; # dirs
	# find "$path" -type f -exec chmod 644 {} \; # files
}
function fs_own {
	local path="$1"
	if test -n "$option_owner"; then
		do_chown "$option_owner" "$path"
	elif test -n "$option_user" -a -n "$option_group"; then
		do_chown "$option_user:$option_group" "$path"
	elif test -n "$option_user"; then
		do_chown "$option_user" "$path"
	elif test -n "$option_group"; then
		do_chown ":$option_group" "$path"
	fi
	do_chmod g+rwx,u+rwx "$path"
}

# =====================================
# Act

for path in "${paths[@]}"; do
	title="fs-own ${path@Q}"
	if test "$option_verbose" = 'yes'; then
		echo-segment --h2="$title"
		echo-eval ls -la "$path"
		if fs_own "$path" && echo-eval ls -la "$path"; then
			echo-segment --g2="$title"
		else
			echo-segment --e2="$title"
		fi
	else
		fs_own "$path"
	fi
done
