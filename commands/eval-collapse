#!/usr/bin/env bash
# shellcheck disable=SC2164,SC1091
source "$DOROTHY/sources/strict.bash"
source "$DOROTHY/sources/arrays.bash"
has_array_support 'mapfile'

function eval-collapse() (
	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Runs a command, collapsing the output once it has completed.

			USAGE:
			eval-collapse [...flags] -- <command [...args]>

			FLAGS:
			--pending=<string>     If provided, this is displayed while the command is running.
			--success=<string>     If provided, this is displayed if a success occurs.
			--failure=<string>     If provided, this is displayed if a failure occurs.
			--wrap                 Whether or not to wrap the output in the command itself.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# prepare
	local ec headers body footer
	ec=0
	headers="$(mktemp)"
	body="$(mktemp)"
	footer=''

	# process
	local item args option_quiet option_pending option_success option_failure option_wrap
	args=()
	option_quiet="$(echo-quiet -- "$@")"
	option_pending=''
	option_success=''
	option_failure=''
	option_wrap=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--pending='*) option_pending="${item:10}" ;;
		'--success='*) option_success="${item:10}" ;;
		'--failure='*) option_failure="${item:10}" ;;
		'--no-wrap'* | '--wrap'*)
			option_wrap="$(
				get-flag-value wrap --missing=yes -- "$item" | echo-affirmative
			)"
			;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet
		'--')
			args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	# headers
	if test -n "$option_pending"; then
		echo "$option_pending" | tee -a "$headers"
	fi
	if test "$option_wrap" = 'yes'; then
		echo-element --open="${args[*]}" | tee -a "$headers"
	fi

	# keep headers while we run the command and revolve door its output
	if test "${EVAL_COLLAPSE-}" = 'yes'; then
		ec=0 && ("${args[@]}") || ec="$?"
	else
		export EVAL_COLLAPSE='yes' # use export, as env doesn't work if args[0] was a function
		ec=0 && ("${args[@]}" |& tee "$body" | echo-revolving-door) || ec="$?"
		export EVAL_COLLAPSE='no'
	fi

	# clear headers, we can re-add them later if needed
	if test "${EVAL_COLLAPSE-}" != 'yes'; then
		echo-clear-lines <"$headers"
	fi

	# generate footer
	if test "$ec" -eq 0; then
		if test -n "$option_success"; then
			footer+="$option_success"$'\n'
		fi
	else
		if test -n "$option_failure"; then
			footer+="$option_failure"$'\n'
		fi
	fi

	# if quiet and successful, dump footer and exit
	if test "$option_quiet" = 'yes' -a "$ec" -eq 0; then
		if test -n "$footer"; then
			echo -n "$footer"
		fi
		return "$ec"
	fi

	# if it didn't output anything, output self closing wrap, then footer, then exit
	if test -z "$(cat "$body")"; then
		echo-element --openclose="${args[*]}" --status="$ec"
		if test -n "$footer"; then
			echo -n "$footer"
		fi
		return "$ec"
	fi
	# the command outputted things

	# output wrap header
	if test "$option_wrap" = 'yes'; then
		echo-element --open="${args[*]}"
	fi
	# if verbose, or failure, output body
	if test "$option_quiet" = 'no' -o "$ec" -ne 0; then
		cat "$body"
	fi
	# outpout wrap footer
	if test "$option_wrap" = 'yes'; then
		echo-element --close="${args[*]}" --status="$ec"
	fi
	# output footer
	if test -n "$footer"; then
		echo -n "$footer"
	fi
	# done
	return "$ec"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	eval-collapse "$@"
fi
