#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Output the contents of the passed file paths.

		USAGE:
		echo-file [--] <...path>
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
option_paths=()
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	'--')
		option_paths+=("$@")
		shift "$#"
		break
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) option_paths+=("$item") ;;
	esac
done

# check
if test "${#option_paths[@]}" -eq 0; then
	help "No paths were provided"
fi

# =====================================
# Arguments

function echo_file_bat {
	local file="$1" os_theme
	if command-exists bat; then
		if test -n "${BAT_THEME-}"; then
			# manual theme
			bat --paging=never "$file"
		else
			# get the operating system theme, so that we can ensure bat output is visible
			os_theme="$(get-os-theme 2>/dev/null || :)" # ignore and silent errors
			if test "$os_theme" = 'light'; then
				bat --theme=ansi --paging=never "$file"
			elif test "$os_theme" = 'dark'; then
				bat --theme=1337 --paging=never "$file"
			else
				# bat is installed, but without knowing the operating system theme, we cannot be sure that the bat theme is readable
				return 1
			fi
		fi
	else
		# bat not installed, fail
		return 1
	fi
}

function echo_file {
	local file ec=0
	while test "$#" -ne 0; do
		file="$1"
		shift
		if test -f "$file"; then
			if ! echo_file_bat "$file"; then
				echo-element --open="$file"
				echo-style --dim "$(echo-trim <"$file")"
				echo-element --close="$file"
			fi
		else
			echo-element --open="$file"
			echo-style --error="The file does not exist."
			echo-element --openclose="$file" --status=2
			ec=2 # ENOENT No such file or directory
			# ^ dont like this, so that all files are noted before crash
		fi
		if test "$#" -ne 0; then
			echo
		fi
	done
	return "$ec"
}

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_file "${option_paths[@]}"
fi
