#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"
source "$DOROTHY/sources/arrays.bash"
requires_array_support 'mapfile' 'empty'
source "$(which eval-helper)"
# trunk-ignore-all(shellcheck/SC2031)

function setup-node() (
	# =====================================
	# Start

	echo-segment --h1="Setup Node.js"

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.bash"

	# environment.bash provides:
	# NVM_DIR
	# but in case it failed to:
	if test -z "${NVM_DIR-}"; then
		export NVM_DIR="$HOME/.nvm"
	fi

	# setup.bash provides:
	local NPM_INSTALL=()
	local NODE_INSTALL=() # deprecated, use NPM_INSTALL
	load_dorothy_config 'setup.bash'

	# deprecations
	if test "${#NODE_INSTALL[@]}" -ne 0; then
		NPM_INSTALL+=("${NODE_INSTALL[@]}")
		update_dorothy_user_config 'setup.bash' -- \
			--field='NODE_INSTALL' --replace= \
			--field='NPM_INSTALL' --array="$(echo-lines -- "${NPM_INSTALL[@]}" | sort --ignore-case | uniq)"
	fi

	# adjustments
	mapfile -t NPM_INSTALL < <(prepare_packages 'NPM_INSTALL' -- "${NPM_INSTALL[@]}")

	# =====================================
	# Arguments

	# help
	function help() {
		cat <<-EOF >/dev/stderr
			USAGE:
			setup-node [--flags]

			FLAGS:
			--configure            Configuration guide.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item reconfigure='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-configure'* | '--configure'*)
			reconfigure="$(get-flag-value configure --missing="$reconfigure" -- "$item" | echo-affirmative)"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Install via System

	# setup system node for global installs and vscode on mac
	function install_homebrew_node() {
		# `reinstall ... || :` as well as `install ... || upgrade ... || :` are no longer necessary,
		# install does upgrade if it is already installed:
		# https://github.com/Homebrew/brew/pull/11525
		brew install node
		npm cache clean --force
	}
	if is-brew; then
		echo-segment --h2='Install Node.js via Homebrew'
		eval-helper --quiet --no-wrap -- install_homebrew_node
		echo "Installed: $(node --version)"
		echo-segment --g2='Install Node.js via Homebrew'
	fi

	# =====================================
	# Clean NVM

	# clean NVM unless configured otherwise
	# the intent of this is to purge unused global Node.js versions and packages
	# we use a configuration variable to change this, as interuppting the flow and asking the user creates too much confusion
	# as such a question is only necessary to experienced users
	function get_nvm_versions() {
		source "$DOROTHY/sources/ripgrep.bash"
		source "$DOROTHY/sources/nvm.sh"
		# trunk-ignore(shellcheck/SC2016)
		nvm ls --no-colors --no-alias | rg -o 'v([^\s]+)' --replace '$1' || :
	}
	function clean_nvm() (
		local versions version
		# run this function as a subshell, so nvm is only loaded for this
		# can't just do `trap 'nvm unload' RETURN` as `nvm unload` unsets NVM_DIR
		source "$DOROTHY/sources/nvm.sh"
		# swap to system
		nvm use system || :
		# fetch versions
		mapfile -t versions < <(get_nvm_versions)
		if test "${#versions[@]}" -eq 0; then
			# already clean
			return 0
		fi
		# clean versions
		setup-util-sd --quiet
		for version in "${versions[@]}"; do
			nvm uninstall "$version" | sd 'Uninstalled node ' 'Uninstalled: '
		done
		# confirm clean was successful
		mapfile -t versions < <(get_nvm_versions)
		test "${#versions[@]}" -eq 0
	)
	function wipe_nvm() {
		rm -Rf "$NVM_DIR"
	}
	function clean_otherwise_wipe_nvm() {
		# clean only what is necessary
		echo-segment --h3='Clean Node.js versions and packages'
		if clean_nvm; then
			echo-segment --g3='Clean Node.js versions and packages'
		else
			# nvm buggered, clean it all
			echo-segment --e3='Clean Node.js versions and packages'
			echo-segment --h3='Clean Node.js Version Manager (NVM) instead'
			wipe_nvm
			echo-segment --g3='Clean Node.js Version Manager (NVM) instead'
		fi
	}
	if test -d "$NVM_DIR"; then
		clean_otherwise_wipe_nvm
	fi

	# =====================================
	# Install via NVM

	# install nvm
	function install_nvm() {
		if test -d "$NVM_DIR"; then
			cd "$NVM_DIR"
		else
			mkdir -p "$NVM_DIR"
			cd "$NVM_DIR"
			git init
			git remote add origin 'https://github.com/nvm-sh/nvm.git'
		fi
		# ensure git remote is usable
		git-helper protocol-update origin https
		# fetch tags
		git fetch --tags origin
		# checkout latest stable tag
		git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
	}
	echo-segment --h2='Install Node.js Version Manager (NVM)'
	echo-style --dim "NVM_DIR=$NVM_DIR"
	eval-helper --quiet --no-wrap -- install_nvm
	echo-segment --g2='Install Node.js Version Manager (NVM)'

	# install nvm node
	function install_nvm_node() {
		source "$DOROTHY/sources/nvm.sh"

		# install
		nvm install --no-progress node       # latest active
		nvm-2596 install --no-progress --lts # latest LTS

		# set default node version
		if is-brew; then
			nvm alias default system
		else
			# use latest lts
			nvm alias default stable
			# use current lts: "$(nvm version-remote --lts)"
		fi

		# default
		nvm use default
	}
	echo-segment --h2='Install Node.js via NVM'
	echo-style --dim='Installs active and LTS versions.'
	eval-helper --quiet --no-wrap -- install_nvm_node
	mapfile -t versions < <(get_nvm_versions)
	for version in "${versions[@]}"; do
		echo "Installed: v$version"
	done
	echo-segment --g2='Install Node.js via NVM'

	# =====================================
	# npm

	source "$DOROTHY/sources/nvm.sh"

	# -------------------------------------
	# Upgrade

	echo-segment --h2='Upgrade npm'
	echo-style --dim="Before: $(npm --version 2>/dev/null)"
	eval-helper --quiet -- npm install -g npm --force 2>/dev/null
	echo "After:  $(npm --version 2>/dev/null)"
	echo-segment --g2='Upgrade npm'

	# -------------------------------------
	# Reconfiguration

	# check
	if
		is-empty-value "$(npm config get init.author.name 2>/dev/null)" ||
			is-empty-value "$(npm config get init.author.email 2>/dev/null)" ||
			is-empty-value "$(npm config get init.author.url 2>/dev/null)" ||
			is-empty-value "$(npm config get init.license 2>/dev/null)"
	then
		reconfigure='yes'
	fi

	# reconfigure
	if test "$reconfigure" = 'yes'; then
		echo-segment --h2='Configure npm'
		npm config set init.author.name "$(
			ask --required --confirm \
				--question="What is the profile name that you want to configure npm with?" \
				--default="$(get-profile name -- npm ... || :)"
		)"
		npm config set init.author.email "$(
			ask --required --confirm \
				--question="What is the profile email that you want to configure npm with?" \
				--default="$(get-profile email -- npm ... || :)"
		)"
		npm config set init.author.url "$(
			ask --required --confirm \
				--question="What is the profile homepage that you want to configure npm with?" \
				--default="$(get-profile url -- npm ... || :)"
		)"
		npm config set init.license "$(
			ask --required --confirm \
				--question="What license do you want to configure npm to default to?" \
				--default="$(npm config get init.license 2>/dev/null)"
		)"
		echo-segment --g2='Configure npm'
	fi

	# -------------------------------------
	# Packages

	# https://github.com/yarnpkg/yarn/issues/2993
	function npm_install_bulk() {
		echo-segment --h2="Install $# npm packages"
		if test "$#" -ne 0; then
			setup-util --name="npm:$*" \
				NPM="$*"
		fi
		echo-segment --g2="Install $# npm packages"
	}
	npm_install_bulk "${NPM_INSTALL[@]}"

	# =====================================
	# Finish

	echo-segment --g1='Setup Node.js'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup-node "$@"
fi
