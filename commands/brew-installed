#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

function brew-installed() (
	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Outputs the names of the installed packages.

			USAGE:
			brew-installed [...options] -- [...packages]

			OPTIONS:
			--requested
			    Output only packages that were manually installed, not packages that were only dependencies.

			--formula
			    Output only packages that are formulas.

			--cask
			    Output only packages that are casks.

			ARGUMENTS:
			...packages
			    If provided, only get details for these packages. Fail if one of them has not yet been installed.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item requested='no' packages brew_type brew_list_cmd brew_info_cmd deno_script_args
	packages=()
	brew_type='' # empty, formula, cask
	brew_list_cmd=(
		'brew'
		'list'
		'--versions' # --versions is necessary to limit to installed packages, as --full-name/-1 doesn't
	)
	brew_info_cmd=(
		'brew'
		'info'
	)
	deno_script_args=(
		'--requested' # the deno script only runs with brew info, which is only run when --requested is provided
	)
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--formula' | '--formulae') brew_type='formula' ;;
		'--cask' | '--casks') brew_type='cask' ;;
		'--no-requested'* | '--requested'*) requested="$(
			get-flag-value requested --missing="$requested" -- "$item" | echo-affirmative
		)" ;;
		'--')
			packages+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# add the filter
	if test -n "$brew_type"; then
		brew_list_cmd+=("--$brew_type")
		brew_info_cmd+=("--$brew_type")
		deno_script_args+=("--$brew_type")
	fi

	# add the packages
	if test "${#packages[@]}" -ne 0; then
		brew_list_cmd+=("${packages[@]}")
		brew_info_cmd+=(
			'--json=v2'
			"${packages[@]}"
		)
	else
		brew_info_cmd+=(
			'--json=v2'
			'--installed'
		)
	fi

	# helpers
	function do_brew_list {
		"${brew_list_cmd[@]}" | cut -d' ' -f1 | sort | uniq
		# returns 1 if one of them was missing
		# if you want to check if any were present, do
		# test -n "$(brew-installed -- rustup rust || :)"
	}
	function do_brew_info {
		local temp_deno_script temp_file lines_in_temp_file

		# ensure deno exists
		setup-util-deno --quiet

		# prepare as the .ts extension is essential
		temp_deno_script="$(fs-temp --directory='brew-installed' --file='deno.ts')"
		cat <<EOF >"$temp_deno_script"
// parse stdin
import { readLines } from "https://deno.land/std/io/bufio.ts";
let data = "";
for await (const line of readLines(Deno.stdin)) {
	data += line;
}
const json = JSON.parse(data);

// prepare result
const names = new Set<string>();

// add casks if not filtered to only formula
if ( Deno.args.includes("--formula") === false ) {
	// all casks are by request, so no need for special --requested handling for casks
	for (const cask of json.casks) {
		names.add(cask.full_token);
	}
}

// add formulas if not filtered to only casks
if ( Deno.args.includes("--cask") === false ) {
	if ( Deno.args.includes("--requested") ) {
		// only requested formula
		for (const formula of json.formulae) {
			if (formula.installed.find((i: any) => i.installed_on_request)) {
				names.add(formula.full_name);
			}
		}
	} else {
		// all formula
		for (const formula of json.formulae) {
			names.add(formula.full_name);
		}
	}
}

// output result
if (names.size) {
	await Deno.stdout.write(
		new TextEncoder().encode(Array.from(names).sort().concat("").join("\n"))
	);
}
EOF

		# run
		"${brew_info_cmd[@]}" | deno run --quiet "$temp_deno_script" "${deno_script_args[@]}"
	}

	# get names of requested packages
	if test "$requested" = 'no'; then
		do_brew_list
	else
		# as brew_info doesn't do the missing exit code like brew_list does, we need to do it ourselves
		if test "${#packages[@]}" -eq 0; then
			do_brew_info
		else
			temp_file="$(mktemp)"
			do_brew_info | tee "$temp_file"
			lines_in_temp_file="$(echo-count-lines --no-inline <"$temp_file")"
			if test "$lines_in_temp_file" -ne "${#packages[@]}"; then
				return 1
			fi
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	brew-installed "$@"
fi
