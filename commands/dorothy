#!/usr/bin/env bash
set -Eeuo pipefail
# ^ manual strict mode, as dorothy may not exist yet

# NOTE:
# Help handling is implemented, however it is done specially, due to the following considerations.
# This script may be run directly, eval'd, or even sourced
# DOROTHY may or may not exist exit yet
# Dorothy clone may or may not exist yet
# Bash v4 is not guaranteed

# @TODOS:
# https://github.com/bevry/dorothy/issues/93
# Is `function name(){}` syntax suitable, or must it be `name(){}`` which is more portable?

# elif is bash, we are in sh
# >/dev/null 2>&1 works in all shells, use that
# source is bash, we are in sh

# =====================================
# Dependencies

# check existing of commands
missing=()
if ! type git &>/dev/null; then
	missing+=('git')
fi
if ! type bash &>/dev/null; then
	missing+=('bash')
fi
if ! type curl &>/dev/null; then
	missing+=('curl')
fi

# if any are missing, then attempt install
if test "${#missing[@]}" -ne 0; then
	if test -x /usr/bin/apt; then
		# for ubuntu
		apt update && apt install -y "${missing[@]}" &>/dev/stderr
	elif test -x /sbin/apk; then
		# for alpine
		(sudo apk add "${missing[@]}") &>/dev/stderr
	elif test -x /sbin/zypper; then
		# for opensuse
		(sudo zypper install bash curl git-core) &>/dev/stderr
	elif test -x "${HOMEBREW_PREFIX-}/bin/brew"; then
		# for macos
		"${HOMEBREW_PREFIX-}/bin/brew" install "${missing[@]}" &>/dev/stderr
	else
		# for everything else
		cat <<-EOF >/dev/stderr
			Dependencies are missing: ${missing[*]}
			Refer to manual: https://github.com/bevry/dorothy
		EOF
		exit 19 # Operation not supported by device
	fi
fi

# =====================================
# Variables

# vars that should be exported to subshells
export DOROTHY DOROTHY_XDG XDG_DATA_HOME XDG_CONFIG_HOME PATH
if test -z "${DOROTHY-}"; then
	DOROTHY=''
fi
if test -z "${DOROTHY_XDG-}"; then
	DOROTHY_XDG=''
fi
if test -z "${XDG_DATA_HOME-}"; then
	XDG_DATA_HOME="$HOME/.local/share"
fi
if test -z "${XDG_CONFIG_HOME-}"; then
	XDG_CONFIG_HOME="$HOME/.config"
fi

# vars that are inherited, for custom configuration
DOROTHY_TRIAL_SHELL="${DOROTHY_TRIAL_SHELL-}"     # used by dorothy cloudflare worker
DOROTHY_TRIAL_THEME="${DOROTHY_TRIAL_THEME-}"     # used by dorothy cloudflare worker
DOROTHY_TRIAL_COMMAND="${DOROTHY_TRIAL_COMMAND-}" # used by dorothy cloudflare worker
if test -z "${ZDOTDIR-}"; then
	ZDOTDIR=''
fi

# vars that are local to this script
action="${DOROTHY_ACTION-}" # used by dorothy cloudflare worker
dorothy_url="https://github.com/bevry/dorothy"

# =====================================
# Helpers

function load_nullglob {
	# can't source things, as may not be cloned yet
	shopt -s nullglob || {
		echo "Missing nullglob support." >/dev/stderr
		return 1
	}
}
function make_executable {
	# makes sure chmod isn't running on nothing, which can happen upon initial user installs
	if test "$#" -ne 0; then
		chmod -f +x "$@"
	fi
}
function assert_dorothy_installed {
	if test ! -d "$DOROTHY"; then
		echo-style \
			--error="Dorothy is not installed." $'\n' \
			"Nothing was found at: " --code="$DOROTHY" $'\n' \
			--notice="Run" --code=" dorothy install " --notice="to install, then you can run" --code=" dorothy $action"
		return 2 # ENOENT No such file or directory
	fi

	# Now we know dorothy exists, so ensure environment configuration is loaded.
	#   Environment configuration wouldn't have loaded if:
	#     in trial mode,
	#     or invoked by a shell that was not yet configured for Dorothy.
	# Environment configuration includes:
	#   homebrew path, homebrew architecture, ecosystem paths, etc.
	# Environment configuration is necessary so that:
	#   dependencies can be detected and installed, such as sd for config-helper
	#   test dependencies can correctly infer their environment's capabilities
	. "$DOROTHY/sources/environment.sh"
}
function move_if_necessary {
	local __source="$1" destination="$2"
	# ensure source exists, and isn't the same as the destination
	if test -e "$__source"; then
		# ensure we aren't moving to the same location, especially with handling for symlinks, prevents:
		# mv: /Users/redacted/.local/share/dorothy/user and /Users/redacted/.config/dorothy/user are identical
		__source="$(fs-realpath "$__source")"
		destination="$(fs-realpath "$destination")"
		if test "$__source" != "$destination"; then
			mv -vf "$__source" "$destination"
		fi
	fi
}
function adjust_dorothy_if_necessary {
	# move if necessary
	if test -d "$DOROTHY" -o -d "$XDG_DATA_HOME/dorothy"; then
		if test "$DOROTHY_XDG" = 'yes'; then
			move_if_necessary "$DOROTHY" "$XDG_DATA_HOME/dorothy"
		elif test "$DOROTHY_XDG" = 'no'; then
			move_if_necessary "$XDG_DATA_HOME/dorothy" "$DOROTHY"
			move_if_necessary "$HOME/.local/share/dorothy" "$DOROTHY"
		else
			# invalid DOROTHY_XDG value
			return 76 # Bad procedure for program
		fi

		# ensure correct permissions
		load_nullglob
		make_executable "$DOROTHY/commands/"*
	fi # else fresh install and no prior clones exist
}
function adjust_user_if_necessary {
	# move if necessary
	if test -d "$DOROTHY/user" -o -d "$XDG_CONFIG_HOME/dorothy"; then
		if test "$DOROTHY_XDG" = 'yes'; then
			move_if_necessary "$DOROTHY/user" "$XDG_CONFIG_HOME/dorothy"
			# ensure $DOROTHY/user always exists
			symlink-helper --existing="$XDG_CONFIG_HOME/dorothy" --symlink="$DOROTHY/user"
		elif test "$DOROTHY_XDG" = 'no'; then
			move_if_necessary "$XDG_CONFIG_HOME/dorothy" "$DOROTHY/user"
			move_if_necessary "$HOME/.config/dorothy" "$DOROTHY/user"
		else
			# invalid DOROTHY_XDG value
			return 76 # Bad procedure for program
		fi

		# ensure correct permissions
		if test -d "$DOROTHY/user/commands"; then
			load_nullglob
			make_executable "$DOROTHY/user/commands/"*
		fi
		if test -d "$DOROTHY/user/commands.local"; then
			load_nullglob
			make_executable "$DOROTHY/user/commands.local/"*
		fi
	fi # else fresh install and no prior clones exist
}
function adjust_zsh_if_necessary {
	# https://zsh.sourceforge.io/Intro/intro_3.html
	# determine ZDOTDIR
	if test "$DOROTHY_XDG" = 'yes'; then
		if test -z "$ZDOTDIR"; then
			ZDOTDIR="$XDG_CONFIG_HOME/zsh"
		fi
	elif test "$DOROTHY_XDG" = 'no'; then
		if test -z "$ZDOTDIR"; then
			ZDOTDIR="$HOME"
		fi
	else
		# invalid DOROTHY_XDG value
		return 76 # Bad procedure for program
	fi
	# move config files
	# zshenv needs to be in $HOME - all other goes in ZDOT.
	move_if_necessary "$ZDOTDIR/.zshenv" "$HOME/.zshenv"
	move_if_necessary "$HOME/.zprofile" "$ZDOTDIR/.zprofile"
	move_if_necessary "$HOME/.zshrc" "$ZDOTDIR/.zshrc"
	move_if_necessary "$HOME/.zlogin" "$ZDOTDIR/.zlogin"
	move_if_necessary "$HOME/.zlogout" "$ZDOTDIR/.zlogout"
}
function prepare_dorothy {
	# if DOROTHY or DOROTHY_XDG exist already, it is via env overrides

	# if no DOROTHY env override, attempt DOROTHY from possible existing installations
	if test -z "$DOROTHY"; then
		if test -d "$XDG_DATA_HOME/dorothy"; then
			DOROTHY="$XDG_DATA_HOME/dorothy"
		elif test -d "$HOME/.local/share/dorothy"; then
			DOROTHY="$HOME/.local/share/dorothy"
		elif test -d "$HOME/.dorothy"; then
			DOROTHY="$HOME/.dorothy"
		elif test -x ./commands/dorothy; then
			DOROTHY="$(pwd)" # GitHub Actions
		fi
	fi

	# if no DOROTHY_XDG env override, enforce DOROTHY_XDG from DOROTHY
	if test -z "$DOROTHY_XDG"; then
		if test -n "$DOROTHY"; then
			if test "$DOROTHY" = "$XDG_DATA_HOME/dorothy"; then
				DOROTHY_XDG='yes'
			else
				DOROTHY_XDG='no'
			fi
		elif test -d "$XDG_DATA_HOME"; then
			DOROTHY_XDG='yes'
		else
			DOROTHY_XDG='no'
		fi
	fi

	# if DOROTHY is still not defined, then there is no env override, and no existing installation
	# so enforce DOROTHY based on DOROTHY_XDG determination
	if test -z "$DOROTHY"; then
		if test "$DOROTHY_XDG" = 'yes'; then
			DOROTHY="$XDG_DATA_HOME/dorothy"
		else
			DOROTHY="$HOME/.dorothy"
		fi
	fi

	# adjust path for determined DOROTHY, as well as XDG variation in case it gets adjusted
	PATH="$DOROTHY/user/commands:$XDG_CONFIG_HOME/dorothy/commands:$DOROTHY/commands:$XDG_CONFIG_HOME/dorothy/commands:$PATH"

	# ensure DOROTHY is in correct location
	adjust_dorothy_if_necessary

	# ensure user configuration is in correct location
	adjust_user_if_necessary

	# ensure shell config files are in correct location
	adjust_zsh_if_necessary
	# fish uses xdg by default
	# bash does not support xdg

}

# =====================================
# Action Helpers

# -------------------------------------
# Setup Dorothy

function install_dorothy {
	# act
	echo
	echo "Installing Dorothy into $DOROTHY"
	git clone "https://github.com/bevry/dorothy.git" "$DOROTHY"
}
function update_dorothy {
	# check
	if test "$action" = 'trial'; then
		return
	fi

	# act
	echo
	echo "Updating the Dorothy installation at $DOROTHY"
	if ! git-helper --path="$DOROTHY" update; then
		echo "...Dorothy was unable to be updated, you will have to figure this out now."
		return 1
	fi
}
function setup_dorothy {
	# check
	if test -d "$DOROTHY"; then
		update_dorothy
	else
		install_dorothy
	fi

	# move if necessary, and fix permissions
	adjust_dorothy_if_necessary
}

# -------------------------------------
# Setup Machine Adjustments

# configures machine hostname
function setup_machine {
	local hostname

	# check
	if test "$action" != 'install'; then
		return
	fi

	# act
	hostname="$(get-hostname)"
	if is-generic "$hostname"; then
		if confirm-bool --ppid=$$ -- "This machine's hostname is currently generic [$hostname], would you like to change it?"; then
			hostname="$(
				ask --question="What should the new hostname be?"
			)"
			if test -n "$hostname"; then
				set-hostname "$hostname"
			else
				echo "Proceeding with the existing hostname: $hostname"
			fi
		fi
	fi
}

# -------------------------------------
# Setup User Configuration

function git_init {
	mkdir -p "$1"
	pushd "$1" >/dev/null
	git init
	popd >/dev/null
}
function install_user {
	local question='' user='' where='' cli='' repo_git='' repo_url='' repo_name repo_description
	repo_name="dotfiles"
	repo_description="My user configuration for the Dorothy dotfile ecosystem: $dorothy_url"

	# check action
	if test "$action" = 'trial'; then
		return
	fi

	# check successful initiation
	if test -d "$DOROTHY/user"; then
		update_user
		return "$?"
	fi

	# log
	echo
	echo "Dorothy houses user configuration inside its own git repository."

	# check where they want to store the user config
	where="$(
		choose-option --required \
			--question="Where do you want to store your Dorothy user configuration?" \
			-- github gitlab custom 'local'
	)"
	if test "$where" = 'github' && command-exists gh; then
		cli='gh'
	elif test "$where" = 'gitlab' && command-exists glab; then
		cli='glab'
	fi
	if test "$where" = 'github' -o "$where" = 'gitlab'; then
		# prepare username default, and clear generic usernames
		user="$(get-profile username || :)"
		if test -n "$user" && is-generic "$user"; then
			user=''
		fi
		user="$(
			ask --required --confirm \
				--question="Enter your $where username." \
				--default="$user"
		)"

		# check what they want to call the repository
		repo_name="$(
			ask --required \
				--question="Enter the ${where} repository name for your Dorothy user configuration." \
				--default="$repo_name"
		)"
		repo_url="https://$where.com/$user/$repo_name"

		# confirm it exists
		if fetch --ok "$repo_url"; then
			if test -n "$cli"; then
				if "$cli" repo view "$repo_name" | grep --quiet --ignore-case "$dorothy_url" || :; then
					echo-style --green+bold="$repo_url" --green=" verified as a Dorothy user configuration repository."
				elif confirm-bool --ppid=$$ -- "$repo_url exists, but does not yet seem to be a Dorothy user configuration repository, would you like to use it anyway (Y), or select an alternative (N)?"; then
					echo-style --blue="^ manually confirmed to use as the Dorothy user configuration repository."
				else
					echo-style --yellow="^ manually elected to use an alternative."
					repo_url=''
				fi
			fi
		else
			echo-style --yellow+bold="$repo_url" --yellow=" does not yet exist, let us create it..."
			if test "$cli" = 'gh'; then
				if ! gh repo create "$repo_name" --description "$repo_description" --homepage "$dorothy_url" --public --confirm --enable-wiki=false; then
					repo_url=''
				fi
			elif test "$cli" = 'glab'; then
				# @todo untested
				if ! glab repo create "$repo_name" --description "$repo_description" --public; then
					repo_url=''
				fi
			fi
		fi
	fi

	# if the repo doesn't exist, get the user to manually create it
	if test -z "$repo_url" -a "$where" != 'local'; then
		if test "$where" = 'github'; then
			open 'https://github.com/new'
		elif test "$where" = 'gitlab'; then
			open 'https://gitlab.com/projects/new#blank_project'
		fi
		question="$(
			cat <<-EOF
				Create a repository for your Dorothy user configuration using the following details.

				Repository name:
				${repo_name}

				Description:
				${repo_description}

				Visibility:
				Public

				Initialize with:
				keep everything unchecked

				Once you have created the repository to house your Dorothy user configuration, type its URL below.
			EOF
		)"
		repo_url="$(
			ask --confirm \
				--question="$question"
		)"
	fi

	# if we have a repo url, then clone it
	if test -n "$repo_url"; then
		repo_git="$(git-helper protocol-format "$repo_url")"
		if git clone "$repo_git" "$DOROTHY/user"; then
			echo-style --green+bold="$repo_git" --green=" successfully cloned to " --green+bold="$DOROTHY/user"
		else
			echo-style --yellow+bold="$repo_git" --yellow=" failed to clone to " --yellow+bold="$DOROTHY/user"
			echo-style --yellow="We will manually initialise instead."
		fi
	else
		echo-style --yellow="No git repository URL provided, we will manually initialise instead."
	fi

	# if we haven't initialised, then manually initialise
	if test ! -d "$DOROTHY/user"; then
		git_init "$DOROTHY/user"
		echo-style --yellow="Manually initialised git repository at " --yellow+bold="$DOROTHY/user"
	fi
}
function update_user {
	# check
	if test "$action" = 'trial'; then
		return
	fi

	# act
	echo
	echo "Updating the Dorothy user configuration at $DOROTHY/user"
	if ! git-helper --path="$DOROTHY/user" update; then
		echo "...Dorothy user configuration was unable to be updated, you will have to figure this out later..."
	fi
}
function setup_user {
	if test "$action" != 'trial'; then
		# update or install
		if test -d "$DOROTHY/user"; then
			update_user
		else
			install_user
		fi

		# move if necessary, and fix permissions
		adjust_user_if_necessary
	fi
}

# -------------------------------------
# Setup Adjustments

function setup_adjustments {
	local file who name url header content deprecated_configuration_files deprecated_configuration_file

	# check
	if test "$action" = 'trial'; then
		return
	fi

	# deprecations
	# this is done awkardly, as we have no guarantees of being in a bash version that properly supports arrays
	deprecated_configuration_files=''
	for deprecated_configuration_file in \
		"$DOROTHY/user/source.sh" \
		"$DOROTHY/user/source.bash" \
		"$DOROTHY/user/source.zsh" \
		"$DOROTHY/user/source.fish" \
		"$DOROTHY/user/env.sh" \
		"$DOROTHY/user/env.bash" \
		"$DOROTHY/user/env.zsh" \
		"$DOROTHY/user/env.fish"; do
		if test -f "$deprecated_configuration_file"; then
			deprecated_configuration_files="$deprecated_configuration_file"$'\n'"$deprecated_configuration_files"
		fi
	done
	if test -n "$deprecated_configuration_files"; then
		cat <<-EOF
			Dorothy has moved away from one configuration file for everything, into specialised configuration files.

			Migration details can be found here:
			https://github.com/bevry/dorothy/discussions/24

			The following files will need to be migrated:
			${deprecated_configuration_files}
		EOF
	fi

	# create essential directories
	mkdir -p \
		"$DOROTHY/user/commands.local" \
		"$DOROTHY/user/commands" \
		"$DOROTHY/user/config.local" \
		"$DOROTHY/user/config"

	# ensure README.md mentions dorothy
	file="$DOROTHY/user/README.md"
	name="$(get-profile name || get-profile username || :)"
	url="$(get-profile url || :)"
	if test -n "$name" -a -n "$url"; then
		who="[${name}'s](${url})"
	elif test -n "$name"; then
		who="${name}'s"
	else
		who='my'
	fi
	header="$(
		cat <<-EOF
			# Dorothy User Configuration

			This is ${who} user configuration for the [Dorothy](${dorothy_url}) dotfile ecosystem.
		EOF
	)"
	if test ! -f "$file"; then
		echo "$header" >"$file"
	elif ! grep --quiet --ignore-case 'dorothy' "$file"; then
		content="$(cat "$file")"
		printf '%s\n\n%s' "$header" "$content" >"$file"
	fi

	# gitignore
	config-helper \
		--file="$DOROTHY/user/.gitignore" -- \
		--find='commands.local[/]' --replace='commands.local/' \
		--find='config.local[/]' --replace='config.local/'
}

# -------------------------------------
# Setup Dorothy Shell Adjustments

function rm_deprecated {
	if test -f "$1"; then
		echo ''
		echo-file "$1"
		if confirm-positive --ppid=$$ -- "The above file is probably deprecated with Dorothy, would you like to replace it?"; then
			rm "$1"
		fi
	fi
}

function setup_shell {
	# check
	if test "$action" != 'install'; then
		return
	fi

	# act
	echo
	echo 'Dorothy will now confirm the modifications required to have it be loaded by your shell.'
	echo
	rm_deprecated "$HOME/.profile"
	rm_deprecated "$HOME/.bash_profile"
	rm_deprecated "$HOME/.bashrc"
	rm_deprecated "$ZDOTDIR/.zshrc"
	rm_deprecated "$ZDOTDIR/.zprofile"
	rm_deprecated "$HOME/.config/fish/config.fish"
	echo

	if confirm-positive --ppid=$$ -- "Would you like bash to use Dorothy?"; then
		# mac and raspi ubuntu
		config-helper \
			--file="$HOME/.bash_profile" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"

		# vm ubuntu
		config-helper \
			--file="$HOME/.bashrc" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"
	fi

	# https://zsh.sourceforge.io/Intro/intro_3.html
	if confirm-positive --ppid=$$ -- "Would you like zsh to use Dorothy?"; then
		mkdir -p "$ZDOTDIR"

		config-helper \
			--file="$ZDOTDIR/.zshrc" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"

		config-helper \
			--file="$ZDOTDIR/.zprofile" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"

		config-helper \
			--file="$HOME/.zshenv" -- \
			--find='ZDOTDIR=.+' --replace="ZDOTDIR=\"$ZDOTDIR\""
	fi

	if confirm-positive --ppid=$$ -- "Would you like fish to use Dorothy?"; then
		mkdir -p "$HOME/.config/fish"
		config-helper \
			--file="$HOME/.config/fish/config.fish" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.fish\" # Dorothy"
	fi
}

# =====================================
# Generic Action: Install, Update, Trial

function act_generic {
	# ensure dorothy and user configuration exist
	setup_dorothy
	setup_machine
	setup_user

	# now that dorothy exists, assert it as so (includes loading environment configuration)
	assert_dorothy_installed

	# continue with adjustments
	setup_adjustments
	setup_shell
	if test "$action" = 'install'; then
		cat <<-EOF
			$(echo-style --success='Dorothy is now setup. ' --notice='Restart your terminal.')
			Once you have restarted your terminal, it is highly recommended that you run:
			$(echo-style --code='setup-util-bash')
		EOF
	fi
}

function act_install {
	act_generic
}

function act_update {
	assert_dorothy_installed
	act_generic
}

function act_trial {
	act_generic

	# don't use sh instead of bash as sh is dash on ubuntu,
	# and ubuntu doesn't support the -- args
	# bash --rcfile does work, but not inside a --rcfile

	# Run the dorothy installation script
	# bash -ilc "$(curl -fsSL https://raw.githubusercontent.com/bevry/dorothy/master/commands/setup-dorothy)"

	# option: shell
	case "$DOROTHY_TRIAL_SHELL" in
	'bash' | '/bin/bash') ;;
	'') DOROTHY_TRIAL_SHELL='bash' ;;
	*)
		echo "Bash shell will be used for trial mode, as alternative shells [$DOROTHY_TRIAL_SHELL] are not yet been supported." >/dev/stderr
		DOROTHY_TRIAL_SHELL='bash'
		;;
	esac

	# command or prompt
	if test -n "$DOROTHY_TRIAL_COMMAND"; then
		# To run only a specific command, run the following and swap out `what-is-my-ip` with whatever command you wish to run
		# bash -ic "$(curl -fsSL https://dorothy.bevry.workers.dev/commands/what-is-my-ip)"

		# command shorthand should work, as PATH should be configured

		# run the command, then exit
		# theme not important for this
		"$DOROTHY_TRIAL_SHELL" --noprofile --norc -ic "
			. '$DOROTHY/sources/environment.sh'
			${DOROTHY_TRIAL_COMMAND}
		"
	else
		# To run multiple commands in a REPL, run the following then type the commands you wish to execute
		# eval "$(curl -fsSL https://dorothy.bevry.workers.dev)"
		# aka
		# bash eval "$(curl -fsSL https://dorothy.bevry.workers.dev)"

		# interactive prompt
		"$DOROTHY_TRIAL_SHELL" --rcfile <(echo "
			DOROTHY_THEME_OVERRIDE='${DOROTHY_TRIAL_THEME:-"trial"}'
			. '$DOROTHY/sources/environment.sh'
			. '$DOROTHY/sources/shell.sh'
			")
	fi
}

# =====================================
# Specific Actions

function act_permissions {
	assert_dorothy_installed
	source "$DOROTHY/sources/globstar.bash"
	source "$DOROTHY/sources/nullglob.bash"
	source "$DOROTHY/sources/arrays.bash"
	requires_array_support 'mapfile'

	function correct_permissions {
		# directories, files that are commands, must be executable
		local directories commands
		commands=(
			"$DOROTHY/commands/"*
			"$DOROTHY/user/commands/"*
			"$DOROTHY/user/commands.local/"*
		)
		mapfile -t directories < <(find-directories "$DOROTHY")
		fs-own --changes --no-recursive --permissions='+rwx' -- "${directories[@]}" "${commands[@]}"
	}

	function stage_new_files {
		# The following paths are ignored by one of your .gitignore files: ...
		# hint: Use -f if you really want to add them.
		# hint: Turn this message off by running
		# hint: "git config advice.addIgnoredFile false"
		pushd "$DOROTHY" >/dev/null
		git add --ignore-errors "$DOROTHY"/** || :
		popd >/dev/null
	}

	function stage_changed_files {
		pushd "$DOROTHY" >/dev/null
		git add -u || :
		popd >/dev/null
	}

	# trunk-ignore(shellcheck/SC1090)
	source "$(which eval-helper)"

	eval-helper --quiet \
		--pending="$(echo-style --bold="Correcting permissions...")" \
		--success="$(echo-style --success="Corrected permissions.")" \
		--failure="$(echo-style --error="Failed to correct permissions.")" \
		-- correct_permissions

	eval-helper --quiet \
		--pending="$(echo-style --bold="Staging new files...")" \
		--success="$(echo-style --success="Staged new files.")" \
		--failure="$(echo-style --error="Failed to stage new files.")" \
		-- stage_new_files

	eval-helper --quiet \
		--pending="$(echo-style --bold="Staging changed files...")" \
		--success="$(echo-style --success="Staged changed files.")" \
		--failure="$(echo-style --error="Failed to stage changed files.")" \
		-- stage_changed_files

	eval-helper --quiet \
		--pending="$(echo-style --bold="Removing junk files...")" \
		--success="$(echo-style --success="Removed junk files.")" \
		--failure="$(echo-style --error="Failed to remove junk files.")" \
		-- rm-junk "$DOROTHY"
}

function act_edit {
	act_permissions
	source "$DOROTHY/sources/edit.sh"
	edit "$DOROTHY"
}

function act_review {
	act_permissions
	git-helper review "$DOROTHY/user" || :
	git-helper review "$DOROTHY" || :
}

function act_theme {
	assert_dorothy_installed
	local themes theme files
	source "$DOROTHY/sources/nullglob.bash"
	source "$DOROTHY/sources/config.sh"
	source "$DOROTHY/sources/arrays.bash"
	requires_array_support 'mapfile'

	# prepare
	mapfile -t files < <(echo-lines -- "$DOROTHY/themes/"*.* "$DOROTHY/user/themes/"*.* | echo-filenames | uniq)
	themes=(
		system
		"${files[@]}"
	)

	# ask
	theme="$(
		choose-option --required \
			--question='Which theme to use?' \
			-- "${themes[@]}"
	)"

	# apply
	source "$DOROTHY/sources/config.bash"
	update_dorothy_user_config 'shell.sh' -- \
		--find='export DOROTHY_THEME=(.*)' --replace="export DOROTHY_THEME=$(echo-quote "$theme")"

	# log
	echo-style --success='Configuration change applied, ' --notice='restart your terminal for the change to take effect.'
}

function act_dev {
	assert_dorothy_installed

	# dependencies and versions
	source "$DOROTHY/sources/ripgrep.bash"
	env UPGRADE=yes setup-util-bash
	env UPGRADE=yes setup-util-prettier
	env UPGRADE=yes setup-util-ripgrep
	env UPGRADE=yes setup-util-shellcheck
	env UPGRADE=yes setup-util-shellcheck
	env UPGRADE=yes setup-util-shfmt
	env UPGRADE=yes setup-util-trunk
	eval-helper --no-quiet -- bash --version
	eval-helper --no-quiet -- prettier --version
	eval-helper --no-quiet -- rg --version
	eval-helper --no-quiet -- shellcheck --version
	eval-helper --no-quiet -- shfmt --version
	eval-helper --no-quiet -- trunk --version
}

function act_format {
	assert_dorothy_installed
	local success='yes' files

	# features
	source "$DOROTHY/sources/nullglob.bash"
	source "$DOROTHY/sources/globstar.bash"
	source "$DOROTHY/sources/arrays.bash"

	# dependencies
	source "$DOROTHY/sources/ripgrep.bash"
	env QUIET=yes setup-util-shfmt
	env QUIET=yes setup-util-prettier
	env QUIET=yes setup-util-trunk

	# <ensure config files are detected>
	pushd "$DOROTHY" >/dev/null

	# format
	trunk check

	# </ensure config files are detected>
	popd >/dev/null

	# success or failure
	if test "$success" = 'yes'; then
		echo-style --success="Succesfully formatted."
	else
		echo-style --error="Failures in formatting."
		return 1
	fi
}

function act_test {
	assert_dorothy_installed
	local success='yes' filepath
	pushd "$DOROTHY" >/dev/null

	# features
	source "$DOROTHY/sources/nullglob.bash"
	source "$DOROTHY/sources/globstar.bash"
	source "$DOROTHY/sources/arrays.bash"

	# dependencies
	source "$DOROTHY/sources/ripgrep.bash"
	env QUIET=yes setup-util-shellcheck
	env QUIET=yes setup-util-trunk

	# <ensure config files are detected>
	pushd "$DOROTHY" >/dev/null

	# lint
	trunk check

	# tests
	while read -r filepath; do
		# $0 doesn't seem to work github actions
		if test "$filepath" = "$DOROTHY/commands/dorothy"; then
			continue
		fi
		"$filepath" --test || success='no'
	done < <(rg -l -e '--test' "$DOROTHY" | sort)

	# </ensure config files are detected>
	popd >/dev/null

	# success or failure
	if test "$success" = 'yes'; then
		echo-style --success="Succesfully tested."
	else
		echo-style --error="Failures in checks."
		return 1
	fi
}

# =====================================
# Action

# prepare
actions=(
	install
	trial
	update
	permissions
	edit
	review
	theme
	dev
	format
	test
)

# help
function help {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Helpers for interacting with the Dorothy dotfile ecosystem.

		USAGE:

		dorothy trial
		    [--shell=<bash|zsh|fish|/bin/bash>]
		    [--theme=<theme>]
		    [-- <command> ...]

		    Installs Dorothy silently, without any permanent dotfile modifications.
		    If a shell is provided, run the desired shell with Dorothy invoked.
		    If a command is provided, invoke the Dorothy command then exit.

		dorothy install [--[no-]xdg]

		    Installs Dorothy interactively, with configuration for dotfile modifications.

		    If you are a poweruser and wish to override XDG autodetection to either enforce XDG compliance or non-compliance then provide [--xdg] or [--no-xdg] respectively.

		dorothy update

		    Updates Dorothy to the latest version.

		dorothy permissions

		    Correct permissions of new Dorothy commands, ensuring they are executable, and that git is aware of them.

		dorothy edit

		    Correct permissions, then open Dorothy's installation and user configuration in your desired editor.

		dorothy review

		    Correct permissions, then open Dorothy's installation and user configuration in your desired git reviewer.

		dorothy theme

		    Interactively configure your desired theme for Dorothy configured shells.

		dorothy dev

		    Automatically install Dorothy' development dependencies.

		dorothy format

		    Automatically format Dorothy's source code to its conventions.

		dorothy test

		    Run checks and tests on Dorothy's source code.
	EOF
	if test "$#" -ne 0; then
		echo-error "$@"
	fi
	return 22 # Invalid argument
}

# process, vars declared at the top
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'--help' | '-h') help ;;
	'--xdg') DOROTHY_XDG='yes' ;;
	'--no-xdg') DOROTHY_XDG='no' ;;
	'trial')
		action='trial'
		while test "$#" -ne 0; do
			item="$1"
			shift
			case "$item" in
			'--shell='*) DOROTHY_TRIAL_SHELL="${item:8}" ;;
			'--theme='*) DOROTHY_TRIAL_THEME="${item:8}" ;;
			'--')
				DOROTHY_TRIAL_COMMAND="$*"
				shift $#
				break
				;;
			'--'*) help "An unrecognised flag was provided: $item" ;;
			*) help "An unrecognised argument was provided: $item" ;;
			esac
		done
		;;
	'i' | 'install')
		action='install'
		;;
	'u' | 'up' | 'update')
		action='update'
		;;
	'p' | 'perm' | 'perms' | 'permissions')
		action='permissions'
		;;
	'e' | 'edit')
		action='edit'
		;;
	'r' | 'review')
		action='review'
		;;
	'theme')
		action='theme'
		;;
	'd' | 'dev')
		action='dev'
		;;
	'f' | 'format' | 'lint')
		action='format'
		;;
	't' | 'test')
		action='test'
		;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*) help "An unrecognised argument was provided: $item" ;;
	esac
done

# all helpers are defined, and argument overrides are handled
# so prepare the local environment context with what is necessary for dorothy
# such that the following [choose-option] will be found
prepare_dorothy

# if no action pre-specified, such as via environment vairable (such as trial mode)
if test -z "$action"; then
	# then choose one if available
	if type 'choose-option' &>/dev/null; then
		action="$(
			choose-option --required \
				--question='which action to perform?' \
				--filter="$action" -- "${actions[@]}"
		)"
	else
		# otherwise install
		action='install'
	fi
fi

# run the intended action and fail if unsupported
case "$action" in
'install') act_generic ;;
'update') act_generic ;;
'trial') act_trial ;;
'permissions') act_permissions ;;
'edit') act_edit ;;
'review') act_review ;;
'theme') act_theme ;;
'dev') act_dev ;;
'format') act_format ;;
'test') act_test ;;
*) help "Invalid action: $action" ;;
esac
