#!/usr/bin/env bash
set -Eeuo pipefail
# ^ manual strict mode

# NOTE:
# This script may be run directly, eval'd, or even sourced
# DOROTHY may or may not exist exit yet
# Dorothy clone may or may not exist yet

# @TODOS:
# https://github.com/bevry/dorothy/issues/93

# =====================================
# Dependencies

# git
if ! git --version >/dev/null; then
	cat <<-EOF
		git is missing, please recheck the installation instructions:
		https://github.com/bevry/dorothy
	EOF
	exit 19 # Operation not supported by device
fi

# =====================================
# Variables

# exports (vars that should be exported to subshells)
export DOROTHY DOROTHY_XDG XDG_DATA_HOME XDG_CONFIG_HOME PATH
if test -z "${DOROTHY-}"; then
	DOROTHY=''
fi
if test -z "${DOROTHY_XDG-}"; then
	DOROTHY_XDG=''
fi
if test -z "${XDG_DATA_HOME-}"; then
	XDG_DATA_HOME="$HOME/.local/share"
fi
if test -z "${XDG_CONFIG_HOME-}"; then
	XDG_CONFIG_HOME="$HOME/.config"
fi

# globals (environment vars that should not be exported to subshells)
if test -z "${ZDOTDIR-}"; then
	ZDOTDIR=''
fi

# script vars (vars local to this script)
dorothy_url="https://github.com/bevry/dorothy"
action=''

# arguments
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'--xdg') DOROTHY_XDG='yes' ;;
	'--no-xdg') DOROTHY_XDG='no' ;;
	*)
		if test -z "$action"; then
			action="$item"
		else
			exit 22 # Invalid argument
		fi
		;;
	esac
done

# =====================================
# Helpers

# -------------------------------------
# DOROTHY, PATH

move_if_necessary() {
	if test -e "$1" -a "$1" != "$2"; then
		mv -vf "$1" "$2" >/dev/tty
	fi
}
adjust_dorothy_is_necessary() {
	# move if necessary
	if test "$DOROTHY_XDG" = 'yes'; then
		move_if_necessary "$DOROTHY" "$XDG_DATA_HOME/dorothy"
	elif test "$DOROTHY_XDG" = 'no'; then
		move_if_necessary "$XDG_DATA_HOME/dorothy" "$DOROTHY"
		move_if_necessary "$HOME/.local/share/dorothy" "$DOROTHY"
	else
		# invalid DOROTHY_XDG value
		return 76 # Bad procedure for program
	fi

	# ensure correct permissions
	chmod -f +x "$DOROTHY/commands/"*
}
adjust_user_if_necessary() {
	# move if necessary
	if test "$DOROTHY_XDG" = 'yes'; then
		move_if_necessary "$DOROTHY/user" "$XDG_CONFIG_HOME/dorothy"
		# ensure $DOROTHY/user always exists
		ln -vsfF "$XDG_CONFIG_HOME/dorothy" "$DOROTHY/user" >/dev/tty
	elif test "$DOROTHY_XDG" = 'no'; then
		move_if_necessary "$XDG_CONFIG_HOME/dorothy" "$DOROTHY/user"
		move_if_necessary "$HOME/.config/dorothy" "$DOROTHY/user"
	else
		# invalid DOROTHY_XDG value
		return 76 # Bad procedure for program
	fi

	# ensure correct permissions
	if test -d "$DOROTHY/user/commands"; then
		chmod -f +x "$DOROTHY/user/commands/"*
	fi
	if test -d "$DOROTHY/user/commands.local"; then
		chmod -f +x "$DOROTHY/user/commands.local/"*
	fi
}
adjust_zsh_if_necessary() {
	# https://zsh.sourceforge.io/Intro/intro_3.html
	# determine ZDOTDIR
	if test "$DOROTHY_XDG" = 'yes'; then
		if test -z "$ZDOTDIR"; then
			ZDOTDIR="$XDG_CONFIG_HOME/zsh"
		fi
	elif test "$DOROTHY_XDG" = 'no'; then
		if test -z "$ZDOTDIR"; then
			ZDOTDIR="$HOME"
		fi
	else
		# invalid DOROTHY_XDG value
		return 76 # Bad procedure for program
	fi
	# move config files
	move_if_necessary "$HOME/.zshenv" "$ZDOTDIR/.zshenv"
	move_if_necessary "$HOME/.zprofile" "$ZDOTDIR/.zprofile"
	move_if_necessary "$HOME/.zshrc" "$ZDOTDIR/.zshrc"
	move_if_necessary "$HOME/.zlogin" "$ZDOTDIR/.zlogin"
	move_if_necessary "$HOME/.zlogout" "$ZDOTDIR/.zlogout"
}
prepare_dorothy() {
	# check for custom initiation, such as curl, or pre-install clone and run
	if test -z "$DOROTHY"; then
		# check if dorothy has previously been cloned
		if test -d "$XDG_DATA_HOME/dorothy"; then
			DOROTHY="$XDG_DATA_HOME/dorothy"
		elif test -d "$HOME/.local/share/dorothy"; then
			DOROTHY="$HOME/.local/share/dorothy"
		elif test -d "$HOME/.dorothy"; then
			DOROTHY="$HOME/.dorothy"
		fi
	fi

	# if not prior configuration, then determine via DOROTHY location
	if test -z "$DOROTHY_XDG"; then
		if test -n "$DOROTHY"; then
			if test "$DOROTHY" = "$HOME/.dorothy"; then
				DOROTHY_XDG='no'
			else
				DOROTHY_XDG='yes'
			fi
		elif test -d "$XDG_DATA_HOME"; then
			DOROTHY_XDG='yes'
		else
			DOROTHY_XDG='no'
		fi
	fi

	# now that DOROTHY_XDG exists, determine DOROTHY
	if test -z "$DOROTHY"; then
		if test "$DOROTHY_XDG" = 'yes'; then
			DOROTHY="$XDG_DATA_HOME/dorothy"
		else
			DOROTHY="$HOME/.dorothy"
		fi
	fi

	# ensure DOROTHY is in correct location
	adjust_dorothy_is_necessary

	# ensure user configuration is in correct location
	adjust_user_if_necessary

	# ensure shell config files are in correct location
	adjust_zsh_if_necessary
	# fish uses xdg by default
	# bash does not support xdg

	# ensure dorothy is accessible for the rest of this script
	PATH="$DOROTHY/user/commands:$DOROTHY/commands:$PATH"
}

# -------------------------------------
# Setup Dorothy

install_dorothy() {
	# act
	echo
	echo "Installing Dorothy into $DOROTHY"
	git clone "https://github.com/bevry/dorothy.git" "$DOROTHY"
}
update_dorothy() {
	# check
	if test "$action" = 'trial'; then
		return
	fi

	# act
	echo
	echo "Updating the Dorothy installation at $DOROTHY"
	if ! git-update "$DOROTHY" >/dev/null; then
		echo "...Dorothy was unable to be updated, you will have to figure this out now."
		return 1
	fi
}
setup_dorothy() {
	# check
	if test -d "$DOROTHY"; then
		update_dorothy
	else
		install_dorothy
	fi

	# move if necessary, and fix permissions
	adjust_dorothy_is_necessary
}

# -------------------------------------
# Setup Machine Adjustments

# configures machine hostname
setup_machine() {
	local hostname

	# check
	if test "$action" != 'install'; then
		return
	fi

	# act
	hostname="$(get-hostname)"
	if is-generic "$hostname"; then
		if confirm-bool --ppid=$$ -- "This machine's hostname is currently generic [$hostname], would you like to change it?"; then
			hostname="$(
				ask --question="What should the new hostname be?"
			)"
			if test -n "$hostname"; then
				set-hostname "$hostname"
			else
				echo "Proceeding with the existing hostname: $hostname"
			fi
		fi
	fi
}

# -------------------------------------
# Setup User Configuration

git_init() {
	mkdir -p "$1"
	pushd "$1" >/dev/null
	git init
	popd >/dev/null
}
install_user() {
	local question='' user='' where='' cli='' repo_git='' repo_url='' repo_name repo_description
	repo_name="dotfiles"
	repo_description="My user configuration for the Dorothy dotfile ecosystem: ${dorothy_url}"

	# check action
	if test "$action" = 'trial'; then
		return
	fi

	# check successful initiation
	if test -d "$DOROTHY/user"; then
		update_user
		return "$?"
	fi

	# log
	echo
	echo "Dorothy houses user configuration inside its own git repository."

	# check where they want to store the user config
	where="$(
		choose-option --required \
			--question="Where do you want to store your Dorothy user configuration?" \
			-- github gitlab custom
	)"
	if test "$where" = 'github' && command-exists gh; then
		cli='gh'
	elif test "$where" = 'gitlab' && command-exists glab; then
		cli='glab'
	fi
	if test "$where" = 'github' -o "$where" = 'gitlab'; then
		# prepare username default, and clear generic usernames
		user="$(get-profile username || :)"
		if test -n "$user" && is-generic "$user"; then
			user=''
		fi
		user="$(
			ask --required --confirm \
				--question="Enter your ${where} username." \
				--default="$user"
		)"

		# check what they want to call the repository
		repo_name="$(
			ask --required \
				--question="Enter the ${where} repository name for your Dorothy user configuration." \
				--default="$repo_name"
		)"
		repo_url="https://${where}.com/${user}/${repo_name}"

		# confirm it exists
		if http-ok "$repo_url"; then
			if test -n "$cli"; then
				if "$cli" repo view "$repo_name" | grep --quiet --ignore-case "$dorothy_url" || :; then
					echo-style --green+bold="$repo_url" --green=" verified as a Dorothy user configuration repository."
				elif confirm-bool --ppid=$$ -- "$repo_url exists, but does not yet seem to be a Dorothy user configuration repository, would you like to use it anyway (Y), or select an alternative (N)?"; then
					echo-style --blue="^ manually confirmed to use as the Dorothy user configuration repository."
				else
					echo-style --yellow="^ manually elected to use an alternative."
					repo_url=''
				fi
			fi
		else
			echo-style --yellow+bold="$repo_url" --yellow=" does not yet exist, let us create it..."
			if test "$cli" = 'gh'; then
				if ! gh repo create "${repo_name}" --description "${repo_description}" --homepage "${dorothy_url}" --public --confirm --enable-wiki=false; then
					repo_url=''
				fi
			elif test "$cli" = 'glab'; then
				# @todo untested
				if ! glab repo create "${repo_name}" --description "${repo_description}" --public; then
					repo_url=''
				fi
			fi
		fi
	fi

	# if the repo doesn't exist, get the user to manually create it
	if test -z "$repo_url"; then
		if test "$where" = 'github'; then
			open 'https://github.com/new'
		elif test "$where" = 'gitlab'; then
			open 'https://gitlab.com/projects/new#blank_project'
		fi
		question="$(
			cat <<-EOF
				Create a repository for your Dorothy user configuration using the following details.

				Repository name:
				${repo_name}

				Description:
				${repo_description}

				Visibility:
				Public

				Initialize with:
				keep everything unchecked

				Once you have created the repository to house your Dorothy user configuration, type its URL below.
			EOF
		)"
		repo_url="$(
			ask --confirm \
				--question="$question"
		)"
	fi

	# if we have a repo url, then clone it
	if test -n "$repo_url"; then
		repo_git="$(git-protocol-format "$repo_url")"
		if git clone "$repo_git" "$DOROTHY/user"; then
			echo-style --green+bold="$repo_git" --green=" successfully cloned to " --green+bold="$DOROTHY/user"
		else
			echo-style --yellow+bold="$repo_git" --yellow=" failed to clone to " --yellow+bold="$DOROTHY/user"
			echo-style --yellow="We will manually initialise instead."
		fi
	else
		echo-style --yellow="No git repository URL provided, we will manually initialise instead."
	fi

	# if we haven't initialised, then manually initialise
	if test ! -d "$DOROTHY/user"; then
		git_init "$DOROTHY/user"
		echo-style --yellow="Manually initialised git repository at " --yellow+bold="$DOROTHY/user"
	fi
}
update_user() {
	# check
	if test "$action" = 'trial'; then
		return
	fi

	# act
	echo
	echo "Updating the Dorothy user configuration at $DOROTHY/user"
	if ! git-update "$DOROTHY/user" >/dev/null; then
		echo "...Dorothy user configuration was unable to be updated, you will have to figure this out later..."
	fi
}
setup_user() {
	if test "$action" != 'trial'; then
		# update or install
		if test -d "$DOROTHY/user"; then
			update_user
		else
			install_user
		fi

		# move if necessary, and fix permissions
		adjust_user_if_necessary
	fi
}

# -------------------------------------
# Setu Adjustments

setup_adjustments() {
	local file who name url header content

	# check
	if test "$action" = 'trial'; then
		return
	fi

	# deprecations
	# this is done awkardly, as we have no guarantees of being in a bash version that properly supports arrays
	deprecated_configuration_files=''
	for deprecated_configuration_file in \
		"$DOROTHY/user/source.sh" \
		"$DOROTHY/user/source.bash" \
		"$DOROTHY/user/source.zsh" \
		"$DOROTHY/user/source.fish" \
		"$DOROTHY/user/env.sh" \
		"$DOROTHY/user/env.bash" \
		"$DOROTHY/user/env.zsh" \
		"$DOROTHY/user/env.fish"; do
		if test -f "$deprecated_configuration_file"; then
			deprecated_configuration_files="$deprecated_configuration_file"$'\n'"$deprecated_configuration_files"
		fi
	done
	if test -n "$deprecated_configuration_files"; then
		cat <<-EOF
			Dorothy has moved away from one configuration file for everything, into specialised configuration files.

			Migration details can be found here:
			https://github.com/bevry/dorothy/discussions/24

			The following files will need to be migrated:
			$deprecated_configuration_files
		EOF
	fi

	# create essential directories
	mkdir -p \
		"$DOROTHY/user/commands.local" \
		"$DOROTHY/user/commands" \
		"$DOROTHY/user/config.local" \
		"$DOROTHY/user/config"

	# ensure README.md mentions dorothy
	file="$DOROTHY/user/README.md"
	name="$(get-profile name || get-profile username || :)"
	url="$(get-profile url || :)"
	if test -n "$name" -a -n "$url"; then
		who="[${name}'s](${url})"
	elif test -n "$name"; then
		who="${name}'s"
	else
		who='my'
	fi
	header="$(
		cat <<-EOF
			# Dorothy User Configuration

			This is ${who} user configuration for the [Dorothy](${dorothy_url}) dotfile ecosystem.
		EOF
	)"
	if test ! -f "$file"; then
		echo "$header" >"$file"
	elif ! grep --quiet --ignore-case 'dorothy' "$file"; then
		content="$(cat "$file")"
		printf '%s\n\n%s' "$header" "$content" >"$file"
	fi

	# gitignore
	config-helper \
		--file="$DOROTHY/user/.gitignore" -- \
		--find='commands.local[/]' --replace='commands.local/' \
		--find='config.local[/]' --replace='config.local/'
}

# -------------------------------------
# Setup Dorothy Shell Adjustments

rm_deprecated() {
	if test -f "$1"; then
		echo ''
		echo-element --open="$1"
		echo-style --dim "$(echo-trim <"$1")"
		echo-element --close="$1"
		if confirm-positive --ppid=$$ -- "The above file is probably deprecated with Dorothy, would you like to replace it?"; then
			rm "$1"
		fi
	fi
}

setup_shell() {
	# check
	if test "$action" != 'install'; then
		return
	fi

	# act
	echo
	echo 'Dorothy will now confirm the modifications required to have it be loaded by your shell.'
	echo
	rm_deprecated "$HOME/.profile"
	rm_deprecated "$HOME/.bash_profile"
	rm_deprecated "$HOME/.bashrc"
	rm_deprecated "$ZDOTDIR/.zshrc"
	rm_deprecated "$ZDOTDIR/.zprofile"
	rm_deprecated "$HOME/.config/fish/config.fish"
	echo

	if confirm-positive --ppid=$$ -- "Would you like bash to use Dorothy?"; then
		# mac and raspi ubuntu
		config-helper \
			--file="$HOME/.bash_profile" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"

		# vm ubuntu
		config-helper \
			--file="$HOME/.bashrc" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"
	fi

	if confirm-positive --ppid=$$ -- "Would you like zsh to use Dorothy?"; then
		config-helper \
			--file="$ZDOTDIR/.zshrc" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"

		config-helper \
			--file="$ZDOTDIR/.zprofile" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"

		config-helper \
			--file="$HOME/.zshenv" -- \
			--find='ZDOTDIR=.+' --replace="ZDOTDIR=\"$ZDOTDIR\""
	fi

	if confirm-positive --ppid=$$ -- "Would you like fish to use Dorothy?"; then
		mkdir -p "$HOME/.config/fish"
		config-helper \
			--file="$HOME/.config/fish/config.fish" -- \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.fish\" # Dorothy"
	fi
}

# =====================================
# Act

# prepre DOROTHY
prepare_dorothy

# ensure action is valid
case "$action" in
'trial' | 'install') ;;
'update')
	if test ! -d "$DOROTHY"; then
		action='install'
	fi
	;;
*)
	exit 22 # Invalid argument
	;;
esac

# perform the actions
setup_dorothy
source "$DOROTHY/sources/nullglob.bash"
setup_machine
setup_user
setup_adjustments
setup_shell
if test "$action" = 'install'; then
	cat <<-EOF
		$(echo-style --success='Dorothy is now setup. ' --notice='Restart your terminal.')
		Once you have restarted your terminal, it is highly recommended that you run:
		$(echo-style --code='setup-util-bash')
	EOF
fi
