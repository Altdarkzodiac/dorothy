#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# @todo currently this is only for creating, however we could make it also for listing/finding as well

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Create a symlink at a new location that points to an existing location.

		USAGE:
		symlink-helper --existing=<existing> --symlink=<symlink>

		EXAMPLES:
		symlink-helper "$HOME" ./my-home-folder-symlink
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}
function help_missing {
	cat <<-EOF >/dev/stderr
		$(echo-style --error="FAILURE:")
		The path to be symlinked $(echo-style --code="$option_existing") doesn't actually exist.
		As such, we cannot create a symlink at $(echo-style --code="$option_symlink") pointing to it.
		Create the path at $(echo-style --code="$option_existing") first, then try again.
	EOF
	exit 2 # ENOENT No such file or directory
}

# process
option_existing=''
option_symlink=''
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'--existing='*) option_existing="${item:11}" ;;
	'--symlink='*) option_symlink="${item:10}" ;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*)
		if test -z "$item"; then
			help "Empty argument provided."
		else
			help "An unrecognised argument was provided: $item"
		fi
		;;
	esac
done

# check
if test -z "$option_existing"; then
	option_existing="$(
		ask --required \
			--question="What is the existing path that you want to symlink elsewhere?"
	)"
fi
if test -z "$option_symlink"; then
	option_symlink="$(
		ask --required \
			--question="What is the new path that you want to redirect?"
	)"
fi

# =====================================
# Act

# check the existance of the source, if it doesn't exist, there is no point
if test ! -e "$option_existing"; then
	help_missing
fi

# if the symlink doesn't exist, ensure its parent path at least exists
if test ! -e "$option_symlink"; then
	mkdir -p "$(dirname "$option_symlink")"
fi

# ensure validity of existing path
while true; do
	# ensure both paths are not relative paths, otherwise wierd things will happen
	option_existing="$(fs-absolute "$option_existing")"
	option_symlink="$(fs-absolute "$option_symlink")"

	# double check the existance of the source, if it doesn't exist, there is no point
	if test ! -e "$option_existing"; then
		help_missing
	fi

	# check if the existing path is a symlink
	# if it is, then use its target instead, and repeat the checks
	if test -L "$option_existing"; then
		prior="$option_existing"
		option_existing="$(fs-realpath "$option_existing")"
		echo-style --bold="üíÅ‚Äç‚ôÄÔ∏è Target " --code="$prior" --bold=" redirects to " --code="$option_existing" --bold=" üëâ using the redirection..." >/dev/stderr
		continue
	fi

	# all checks passed, break
	break
done

# check if the symlink path already exists
if test -e "$option_symlink"; then
	if test -L "$option_symlink"; then
		echo-style --bold="üíÅ‚Äç‚ôÄÔ∏è Symlink already exists at " --code="$option_symlink" --bold=" üëâ recreating..." >/dev/stderr
		rm "$option_symlink"
	else
		fs-rm "$option_symlink"
	fi
fi

# create the symlink
ln -sfF "$option_existing" "$option_symlink"

# log result to stderr
echo-style --success="üëç Symlink created at " --code="$option_symlink" --bold=" targetting " --code="$option_existing"
