#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

function get-app() (
	local dirs=(
		"$HOME/Applications"
		'/Applications'
		'/Applications/Setapp'
		'/System/Applications' # TextEdit
	)

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the full path of a GUI application.

			USAGE:
			get-app [--quiet] <app path or name>

			QUIRKS:
			Searches the following paths for the application:
			$(echo-lines -- "${dirs[@]}")
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item name='' option_quiet
	option_quiet="$(echo-quiet -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--name='*) name="${item:7}" ;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$name"; then
				name="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if test -z "$name"; then
		help "No application name or path was provided"
	fi

	# =====================================
	# Act

	# ensure the name has .app appended
	local app="${name%.app}.app"

	# iterate through a few options
	local dir path
	for dir in "${dirs[@]}"; do
		path="$dir/$app"
		if test -d "$path"; then
			if test "$option_quiet" = 'no'; then
				echo "$path"
			fi
			return 0
		fi
	done

	# wasn't found
	return 1
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get-app "$@"
fi
