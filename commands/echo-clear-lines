#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

function echo-clear-lines() (
	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Deletes as many lines as it received.

			USAGE:
			echo $'one\ntwo\nthree'; echo-clear-lines $'two\nthree'
			# ^ outputs: one

			echo 'sup'; printf 'a\nb\nc' | echo-clear-lines --piped
			# ^ outputs: sup

			header="\$(mktemp)"; echo 'sup'; printf 'a\nb\nc' | tee "\$header"; echo-clear-lines < "\$header"
			# ^ outputs: sup
		EOF
	}

	# test cases:
	# confirm --ppid=$$ -- "Press any key to continue..."
	# ^ without \e[J it will have an indentation at the start

	local piped='no'
	if test "${1-}" = '--piped'; then
		piped='yes'
		shift
	fi

	function on_arg {
		echo-clear-lines <<<"$*"
		exit "$?"
	}
	function on_line {
		if test "$piped" = 'yes'; then
			# erase current line
			printf '\e[2K\e[G'
		else
			# delete prior line (aka echo-clear-line)
			printf '\e[F\e[J'
		fi
	}
	function on_inline {
		# erase current line
		printf '\e[2K\e[G'
	}

	source "$DOROTHY/sources/stdinargs.bash"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo-clear-lines "$@"
fi
