#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"
source "$DOROTHY/sources/arrays.bash"
requires_array_support 'mapfile' 'empty'

# @todo this is used by cpr under special circumstances
# add EXAMPLE for its actual use
function get-local-to-remote() (
	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			If the provided path a mount of a remote target,
			get the remote equivalent of the mount.

			USAGE:
			get-local-to-remote <locally-mounted-path>
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # Invalid argument
	}

	# process
	local item target=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$target"; then
				target="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if test -z "$target"; then
		help "<locally-mounted-path> is required"
	fi

	# =====================================
	# Dependencies

	source "$DOROTHY/sources/ripgrep.bash"

	# =====================================
	# Action

	local remotes result volume path server directory result
	mapfile -t remotes < <(get-volumes --remote | echo-if-nonempty)
	if is-array-empty "${remotes[@]}"; then
		echo 'there were no remote volumes to convert to' >/dev/stderr
		return 1
	fi

	result=''
	for remote in "${remotes[@]}"; do
		mapfile -t parts < <(echo-split $'\t' -- "$remote")
		volume="${parts[0]}"
		# trunk-ignore(shellcheck/SC2016)
		path="$(rg '^'"$volume"'(.+)' --replace '$1' <<<"$target" || :)"
		if test -n "$path"; then
			server="${parts[1]}"
			directory="${parts[2]}"
			result="$server:$directory$path"
			break
		fi
	done

	if test -n "$result"; then
		echo "The local to remote conversion for [$target] will probably be something like these, but not these, as the username will be a local login username, and the mount point will be the local mount point rather than the remote mount point, as such, these are only suggestions to guide what the correct combination could be:"
		echo
		echo "$result"
		echo
		# trunk-ignore(shellcheck/SC2016)
		rg '(.+)@(.+?)([.].+)?:(.+)' --replace 'a-login-user@$2:/mnt$4' <<<"$result"
	else
		return 1
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get-local-to-remote "$@"
fi
