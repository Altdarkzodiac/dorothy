#!/usr/bin/env bash -l
# uses login shell as otherwise global vars won't exist
set -e

echo -e "\nConfiguring git..."

# General
git config --global core.excludesfile ~/.gitignore_global
git config --global push.default simple
git config --global mergetool.keepBackup false
git config --global color.ui auto
git config --global hub.protocol https

# Editor
if is_string "$TERMINAL_EDITOR_PROMPT"; then
	git config --global core.editor "$TERMINAL_EDITOR_PROMPT"
elif is_string "$TERMINAL_EDITOR"; then
	git config --global core.editor "$TERMINAL_EDITOR"
elif is_string "$EDITOR"; then
	git config --global core.editor "$EDITOR"
fi

# Merge tool
if command_exists meld; then
	git config --global diff.tool meld
	git config --global merge.tool meld
elif is_mac; then
	git config --global diff.tool opendiff
	git config --global merge.tool opendiff
fi

# Authentication
# Use OSX Credential Helper if available, otherwise default to time cache
if is_mac; then
	git config --global credential.helper osxkeychain
	git config --global difftool.prompt false
	# http://apple.stackexchange.com/a/254619/15131
	if ! silent grep 'AddKeysToAgent yes' < ~/.ssh/config; then
		printf "\nAddKeysToAgent yes" >> ~/.ssh/config
	fi
else
	git config --global credential.helper cache
	git config credential.helper 'cache --timeout=86400'
fi

# GPG
if command_exists gpg; then
	GPG_SIGNING_KEY=$(key get public)
	if is_string "$GPG_SIGNING_KEY"; then
		git config --global user.signingkey "$GPG_SIGNING_KEY"
		git config --global gpg.program "$(which gpg)"
		git config --global tag.gpgsign true
		git config --global commit.gpgsign true

		# git config --global push.gpgsign true
		# ^ github desktop doesnâ€™t support this with: receiving end does not support --signed push

		if silent grep "no-tty" "$HOME/.gnupg/gpg.conf"; then
			echo "no-tty" >> "$HOME/.gnupg/gpg.conf"
			# ^ http://github.com/isaacs/github/issues/675
		fi
	else
		echo "no gpg signing key found"
	fi
fi