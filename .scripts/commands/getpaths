#!/bin/bash

export arg=$1

# don't use contains command, as it won't detect things like
# PATH=a/b
# add PATH a

function add {
	if test "$arg" = "fish"; then
		echo "set $1 \$$1 $2;"
	else
		echo "export $1=$2:\$$1;"
	fi
}

if test "$arg" = "fish"; then
	echo "set -e PATH;"
	echo "set -e MANPATH;"
	echo "set -e CLASSPATH;"
else
	echo "export PATH='';"
	echo "export MANPATH='';"
	echo "export CLASSPATH='';"
fi

# Add current directories node_module binaries to the end of the path, so least preferred
add PATH "./node_modules/.bin"

# Split the current paths
echo -e "${PATH//:/\n}" | while read -r line ; do
	add PATH "$line"
done
if ! is_empty_string "$MANPATH"; then
	echo -e "${MANPATH//:/\n}" | while read -r line ; do
		add MANPATH "$line"
	done
fi
if ! is_empty_string "$CLASSPATH"; then
	echo -e "${CLASSPATH//:/\n}" | while read -r line ; do
		add CLASSPATH "$line"
	done
fi

# Add the paths needed for go
if command_exists go; then
	if is_empty_string "$GOPATH"; then
		export GOPATH=$HOME/.go
		mkdir -p "$GOPATH"
	fi
	add PATH "$GOPATH/bin"
fi

# Ruby
if command_exists go; then
	if is_empty_string "$GEM_HOME"; then
		export GEM_HOME=$HOME/.gems
		mkdir -p "$GEM_HOME"
	fi
	add PATH "$GEM_HOME/bin"
fi

# Java
if is_empty_string "$CLASSPATH"; then
	add CLASSPATH "."
fi

# Clojurescript
if is_dir "$HOME/.clojure/clojure-1.8"; then
	add PATH "$HOME/.clojure/clojure-1.8.0"
	add CLASSPATH "$HOME/.clojure/clojure-1.8.0"
fi

# Straightforward other additions to the path
if is_dir /usr/local/opt/ruby/bin; then
	add PATH "/usr/local/opt/ruby/bin"
fi
if is_dir /usr/local/heroku/bin; then
	add PATH "/usr/local/heroku/bin"
fi
if is_dir /usr/local/bin; then
	add PATH "/usr/local/bin"
fi
if is_dir "$HOME/bin"; then
	add PATH "$HOME/bin"
fi

# Man path
if is_dir /usr/local/man; then
	add MANPATH "/usr/local/man"
fi


if test "$arg" = "fish"; then
	echo "set PATHS_SET true;"
else
	echo "export PATHS_SET=true;"
fi
