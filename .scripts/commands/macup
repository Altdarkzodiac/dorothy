#!/usr/bin/env bash
set -e

export warnings="";
export action="$1"
export localRoot="$HOME"
export cloudRoot="$HOME/Library/Mobile Documents/com~apple~CloudDocs/Apps/macup"

export timeBackup="$2";
if is_empty_string "$timeBackup"; then
	echo "fetching latest time machine backup"
	timeBackup="$(expandpath /Volumes/Time\ Machine\ Backups/Backups.backupdb/*/Latest)"
	if ! is_dir "$timeBackup"; then
		timeBackup="$(tmutil latestbackup)"
		if is_empty_string "$timeBackup"; then
			echo "time machine backup couldn't be determined automatically, pass it as the second argument"
			exit 1
		fi
	fi
fi

export timeRoot;
if is_dir "$timeBackup/Macintosh HD$HOME"; then
	timeRoot="$timeBackup/Macintosh HD$HOME"
elif is_dir "$timeBackup/System$HOME"; then
	timeRoot="$timeBackup/System$HOME"
else
	timeRoot="$(expandpath "$timeBackup/*$HOME")"
	if ! is_dir "$timeRoot"; then
		echo "Could not find user directory in time machine backup"
		exit 1
	fi
fi

function backup {
	echo "backup: $1"
	if is_exists "$localRoot/$1"; then
		sudo rm -Rf "$cloudRoot/$1"
		mkdir -p "$(dirname "$cloudRoot/$1")"
		cp -fpLRv "$localRoot/$1" "$cloudRoot/$1"
	else
		warning="MISSING: $localRoot/$1"
		warnings="$warnings\n$warning"
		echo "$warning"
	fi
}
function restore {
	echo "restore: $1"
	if is_exists "$timeRoot/$1"; then
		sudo rm -Rf "$localRoot/$1"
		mkdir -p "$(dirname "$localRoot/$1")"
		tmutil restore -v "$timeRoot/$1" "$localRoot/$1"
	else
		warning="MISSING: $timeRoot/$1"
		warnings="$warnings\n$warning"
		echo "$warning"
	fi
}
function remove {
	echo "remove: $1"
	sudo rm -Rf "$localRoot/$1"
}
function process {
	if is_equal "$action" "backup"; then
		backup "$1"
	elif is_equal "$action" "restore"; then
		restore "$1"
	else
		echo "USAGE:"
		echo "BACKUP TO CLOUD: macup backup"
		echo "RESTORE FROM TIME MACHINE: macup restore"
		exit 1
	fi
}

if confirm "little snitch"; then
	process "Library/Application Support/Objective Development"
	process "Library/Application Support/Little Snitch"
	process "Library/Preferences/at.obdev.LittleSnitchAgent.plist"
	process "Library/Preferences/at.obdev.LittleSnitchConfiguration.plist"
	process "Library/Preferences/at.obdev.LittleSnitchNetworkMonitor.plist"
	process "Library/Preferences/at.obdev.LittleSnitchSoftwareUpdate.plist"
fi

if confirm "micro snitch"; then
	process "Library/Preferences/at.obdev.MicroSnitch.plist"
fi

if confirm "tunnelblick"; then
	process "Library/Application Support/Tunnelblick"
fi

if confirm "audiohijack"; then
	process "Library/Application Support/Audio Hijack"
	process "Library/Preferences/com.rogueamoeba.audiohijack3.plist"
fi

if confirm "loopback"; then
	process "Library/Preferences/com.rogueamoeba.Loopback.plist"
	process "Library/Preferences/com.rogueamoeba.loopbackd.plist"
fi

if confirm "soundsource"; then
	process "Library/Preferences/com.rogueamoeba.soundsource.plist"
fi

if confirm "appzapper"; then
	process "Library/Preferences/com.appzapper.AppZapper.plist"
fi

if confirm "tower"; then
	process "Library/Application Support/com.fournova.Tower2"
	process "Library/Preferences/com.fournova.Tower2.plist"
fi

if confirm "transmit"; then
	process "Library/Preferences/com.panic.Transmit.plist"
	process "Library/Application Support/Transmit"
fi


if confirm "apple: mail"; then
	process "Library/Containers/com.apple.mail/Data/Library/Preferences"
fi

if confirm "cyberduck"; then
	process "Library/Preferences/ch.sudo.cyberduck.plist"
fi

if confirm "gpg"; then
	process .gnupg
fi

if confirm "npm"; then
	process .npmrc
fi

if confirm "ssh"; then
	process .ssh
fi

if confirm "env"; then
	process .scripts/env.sh
fi

if confirm "1password"; then
	process "Library/Containers/com.agilebits.onepassword-osx"
fi

if confirm "bartender"; then
	process Library/Preferences/com.surteesstudios.Bartender.plist
fi

if confirm "brave"; then
	process "Library/Application Support/brave"
fi

if confirm "calibre"; then
	process Library/Preferences/calibre
	process Library/Preferences/net.kovidgoyal.calibre.plist
fi

if confirm "contexts"; then
	process Library/Preferences/com.contextsformac.Contexts.plist
fi

if confirm "devdocs"; then
	process "Library/Application Support/DevDocs"
fi

if confirm "firefox"; then
	process "Library/Application Support/Firefox"
fi

if confirm "freedom"; then
	process Library/Preferences/com.80pct.FreedomPlatform.plist
fi

if confirm "hazeover"; then
	process Library/Preferences/com.pointum.hazeover.plist
fi

if confirm "apple: itunes"; then
	process Library/Preferences/com.apple.iPod.plist
	process Library/Preferences/com.apple.iTunes.plist
fi

if confirm "kodi"; then
	process "Library/Application Support/Kodi"
fi

if confirm "opera"; then
	process "Library/Application Support/com.operasoftware.Opera"
fi

if confirm "plex"; then
	process "Library/Preferences/com.plexapp.plexmediaserver.plist"
	process "Library/Application Support/Plex Media Server"
	rm -Rf "$HOME/Library/Application Support/Plex Media Server/Updates"
fi

if confirm "apple: safari: history?"; then
	process "Library/Safari/History.db"
	process "Library/Safari/History.db-lock"
	process "Library/Safari/History.db-shm"
	process "Library/Safari/History.db-wal"
	process "Library/Safari/HistoryIndex.sk"
fi
if confirm "apple: safari: preferences"; then
	process Library/Preferences/com.apple.Safari.plist
fi

if confirm "apple: saved searches"; then
	process "Library/Saved Searches"
fi

if confirm "slack"; then
	process "Library/Containers/com.tinyspeck.slackmacgap"
fi

if confirm "skype"; then
	process "Library/Application Support/Skype"
	process Library/Preferences/com.skype.skype.plist
fi

if confirm "spotify"; then
	process Library/Preferences/com.spotify.client.plist
	process "Library/Application Support/Spotify"
fi

if confirm "spotifree"; then
	process Library/Preferences/de.eneas.Spotifree.plist
fi

if confirm "teamviewer"; then
	process Library/Preferences/com.teamviewer.teamviewer.preferences.plist
fi

if confirm "apple: terminal"; then
	process Library/Preferences/com.apple.Terminal.plist
fi

if confirm "transmission"; then
	process Library/Preferences/org.m0k.transmission.plist
	process "Library/Application Support/Transmission"
	process .config/transmission
fi

if confirm "typora"; then
	process "Library/Application Support/abnerworks.Typora"
	process Library/Preferences/abnerworks.Typora.plist
fi

if confirm "usage"; then
	process "Library/Application Support/com.mediaatelier.Usage"
fi

if confirm "vlc"; then
	process "Library/Application Support/org.videolan.vlc"
	process Library/Preferences/org.videolan.vlc
	process Library/Preferences/org.videolan.vlc.plist
fi

if confirm "vmware"; then
	process "Library/Preferences/VMware Fusion"
fi

if confirm "xld"; then
	process Library/Preferences/jp.tmkk.XLD.plist
fi

# http://apple.stackexchange.com/a/173940/15131
if confirm "apple: messages"; then
	remove Library/Caches/com.apple.iChat
	process Library/Preferences/com.apple.imessage.bag.plist
	process Library/Preferences/com.apple.imservice.ids.FaceTime.plist
	process Library/Preferences/com.apple.imservice.ids.iMessage.plist
	process Library/Preferences/com.apple.iChat.AIM.plist
	process Library/Preferences/com.apple.iChat.Jabber.plist
	process Library/Preferences/com.apple.iChat.StatusMessages.plist
	process Library/Preferences/com.apple.iChat.Yahoo.plist
	process Library/Preferences/com.apple.iChat.plist
	process Library/Messages
	process Library/Containers/com.apple.iChat
fi

echo -e "Warnings:\n$warnings"